faccafaa566d4096077bb15a20844bc6
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json');
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json');
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json');
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Students.all().then(resp => expect(resp.data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }, {
    "school_name": "Brsibane High",
    "teacher_name": "Ratliff Wheeler",
    "score": 6880,
    "class_name": 5
  }, {
    "school_name": "Perth Modern School",
    "teacher_name": "Helena Bauer",
    "score": 9137,
    "class_name": 4
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }, {
    "school_name": "state central",
    "admin_name": "Mcintosh Nelson",
    "school_address": "Brsibane, QLD",
    "score": 24623
  }, {
    "school_name": "Gold Coast Primary",
    "admin_name": "Burch Whitfield",
    "school_address": "Gold Coast, QLD",
    "score": 39648
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
test('Sorting', () => {
  it('Array should be sortedby score', () => {
    res.sort((a, b) => {
      if (a.score !== b.score) {
        return a.score - b.res;
      }

      return new Date(b.updated) - new Date(a.updated);
    });
    expect(component.contains(result)).toEqual(expect.arrayContaining(res));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,