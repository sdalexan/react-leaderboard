eb48695463feba1904ec965c7d70992c
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json').then(res => res.data);
    return res;
    console.log(res);
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 3
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  return Students.all().then(data => expect(data).toEqual(students));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsImRhdGEiLCJjb25zb2xlIiwibG9nIiwiQ2xhc3NlcyIsInJlc3AiLCJTY2hvb2xzIiwidGVzdCIsInN0dWRlbnRzIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJleHBlY3QiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiQUF3QkFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLE9BQVY7O0FBeEJBLE1BQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBRUEsTUFBTUMsUUFBTixDQUFlO0FBQ1gsZUFBYUMsR0FBYixHQUFtQjtBQUNmLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSw4QkFBVixFQUEwQ0MsSUFBMUMsQ0FBK0NGLEdBQUcsSUFBSUEsR0FBRyxDQUFDRyxJQUExRCxDQUFoQjtBQUNBLFdBQU9ILEdBQVA7QUFDQUksSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlMLEdBQVo7QUFDRjs7QUFMUzs7QUFRZixNQUFNTSxPQUFOLENBQWM7QUFDVixlQUFhUCxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSwyQkFBVixFQUF1Q0MsSUFBdkMsQ0FBNENLLElBQUksSUFBSUEsSUFBSSxDQUFDSixJQUF6RCxDQUFoQjtBQUNBLFdBQU9ILEdBQVA7QUFDRDs7QUFKUTs7QUFNZCxNQUFNUSxPQUFOLENBQWM7QUFDVixlQUFhVCxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSw0QkFBVixFQUF3Q0MsSUFBeEMsQ0FBNkNLLElBQUksSUFBSUEsSUFBSSxDQUFDSixJQUExRCxDQUFoQjtBQUNBLFdBQU9ILEdBQVA7QUFDRDs7QUFKUTs7QUFVZFMsSUFBSSxDQUFDLHVCQUFELEVBQTBCLE1BQU07QUFDaEMsUUFBTUMsUUFBUSxHQUFHLENBQUM7QUFDZCxtQkFBZSxlQUREO0FBRWQsWUFBUSxlQUZNO0FBR2QsYUFBUyxHQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFELENBQWpCO0FBT0EsUUFBTUgsSUFBSSxHQUFHO0FBQUVKLElBQUFBLElBQUksRUFBR087QUFBVCxHQUFiO0FBRUFkLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVVSxrQkFBVixDQUE2QixNQUFNQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JOLElBQWhCLENBQW5DO0FBRUEsU0FBT1QsUUFBUSxDQUFDQyxHQUFULEdBQWVHLElBQWYsQ0FBb0JDLElBQUksSUFBSVcsTUFBTSxDQUFDWCxJQUFELENBQU4sQ0FBYVksT0FBYixDQUFxQkwsUUFBckIsQ0FBNUIsQ0FBUDtBQUVILENBZEcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuY2xhc3MgU3R1ZGVudHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc3R1ZGVudHMtc2NvcmVzLmpzb24nKS50aGVuKHJlcyA9PiByZXMuZGF0YSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gICAgIH1cbn1cblxuY2xhc3MgQ2xhc3NlcyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL2NsYXNzLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuY2xhc3MgU2Nob29scyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3NjaG9vbC1zY29yZXMuanNvbicpLnRoZW4ocmVzcCA9PiByZXNwLmRhdGEpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cblxuXG5qZXN0Lm1vY2soJ2F4aW9zJyk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBTdHVkZW50cycsICgpID0+IHtcbiAgICBjb25zdCBzdHVkZW50cyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImFseWNlIGZpc2NoZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5OTUsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAzXG4gICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc3R1ZGVudHMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcbiAgICBcbiAgICByZXR1cm4gU3R1ZGVudHMuYWxsKCkudGhlbihkYXRhID0+IGV4cGVjdChkYXRhKS50b0VxdWFsKHN0dWRlbnRzKSk7XG5cbn0pO1xuXG4iXX0=