{"version":3,"sources":["service.test.js"],"names":["jest","mock","axios","require","Students","all","resS","get","Classes","res","Schools","test","students","resp","data","mockImplementation","Promise","resolve","then","expect","toEqual","classes","schools"],"mappings":"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","sourcesContent":["const axios = require('axios');\n\nclass Students {\n    static async all() {\n       let resS = await axios.get('../data/students-scores.json');\n       return resS;\n     }\n}\n\nclass Classes {\n    static async all() {\n       let res = await axios.get('../data/class-scores.json');\n       return res;\n     }\n}\nclass Schools {\n    static async all() {\n       let res = await axios.get('../data/school-scores.json');\n       return res;\n     }\n}\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 1\n    },\n    {\n        \"school_name\": \"Sydney Girls High School\",\n        \"name\": \"Lara Walls\",\n        \"score\": 709,\n        \"class_name\": 4\n    },\n    {\n        \"school_name\": \"Fort Street High School\",\n        \"name\": \"Jenifer Mills\",\n        \"score\": 55,\n        \"class_name\": \"Prep\"\n    }];\n\n    const resp = { data : students };\n\n    axios.get.mockImplementation(() => Promise.resolve(resp));\n\n    Students.all().then(resp => expect(resp.data).toEqual(resS));\n    \n});\n\ntest('Should fetch Classes', () => {\n\n    const classes = [ {\n        \"school_name\": \"Fort Street High School\",\n        \"teacher_name\": \"Connie Mcknight\",\n        \"score\": 8566,\n        \"class_name\": 1\n      },\n      {\n        \"school_name\": \"Brsibane High\",\n        \"teacher_name\": \"Ratliff Wheeler\",\n        \"score\": 6880,\n        \"class_name\": 5\n      },\n      {\n        \"school_name\": \"Perth Modern School\",\n        \"teacher_name\": \"Helena Bauer\",\n        \"score\": 9137,\n        \"class_name\": 4\n      }];\n\n    const resp = { data : classes };\n\n    axios.get.mockImplementation(() => Promise.resolve(resp));\n\n    Classes.all().then(resp => expect(resp.data).toEqual(classes));\n});\n\n\ntest('Should fetch Schools', () => {\n    const schools = [{\n        \"school_name\":\"Brsibane High\",\n        \"admin_name\":\"Brandie Mcgee\",\n        \"school_address\":\"Gold Coast, QLD\",\n        \"score\":95608\n     },\n     {\n        \"school_name\":\"state central\",\n        \"admin_name\":\"Mcintosh Nelson\",\n        \"school_address\":\"Brsibane, QLD\",\n        \"score\":24623\n     },\n     {\n        \"school_name\":\"Gold Coast Primary\",\n        \"admin_name\":\"Burch Whitfield\",\n        \"school_address\":\"Gold Coast, QLD\",\n        \"score\":39648\n     }];\n\n    const resp = { data : schools };\n\n    axios.get.mockImplementation(() => Promise.resolve(resp));\n\n    Schools.all().then(resp => expect(resp.data).toEqual(schools));\n    \n});\n\n"]}