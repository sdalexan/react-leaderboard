b996d1c3f0679f048bdf711f2b8a97fb
jest.mock('axios');

const axios = require('axios');

const getData = dataUrl => {
  console.log(dataUrl);

  if (localStorage.getItem(dataUrl)) {
    console.log('Class cached');
    let sData = JSON.parse(localStorage.getItem(dataUrl));
    return sData.slice(0, 10);
  } else {
    console.log('Class non cached');
    return axios.get(dataUrl).then(res => {
      let cData = res.data;
      cData.sort(function (a, b) {
        return b.score - a.score;
      });
      localStorage.setItem(dataUrl, JSON.stringify(res.data));
      return cData.slice(0, 10);
    });
  }
};

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json').then(res => res.data);
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 3
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  return getData.all().then(data => expect(data).toEqual(students));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsImdldERhdGEiLCJkYXRhVXJsIiwiY29uc29sZSIsImxvZyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJzRGF0YSIsIkpTT04iLCJwYXJzZSIsInNsaWNlIiwiZ2V0IiwidGhlbiIsInJlcyIsImNEYXRhIiwiZGF0YSIsInNvcnQiLCJhIiwiYiIsInNjb3JlIiwic2V0SXRlbSIsInN0cmluZ2lmeSIsIlN0dWRlbnRzIiwiYWxsIiwiQ2xhc3NlcyIsInJlc3AiLCJTY2hvb2xzIiwidGVzdCIsInN0dWRlbnRzIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJleHBlY3QiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiQUE0Q0FBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLE9BQVY7O0FBNUNBLE1BQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBR0EsTUFBTUMsT0FBTyxHQUFHQyxPQUFPLElBQUk7QUFDdkJDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixPQUFaOztBQUNBLE1BQUlHLFlBQVksQ0FBQ0MsT0FBYixDQUFxQkosT0FBckIsQ0FBSixFQUFtQztBQUMvQkMsSUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksY0FBWjtBQUNBLFFBQUlHLEtBQUssR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdKLFlBQVksQ0FBQ0MsT0FBYixDQUFxQkosT0FBckIsQ0FBWCxDQUFaO0FBQ0EsV0FBT0ssS0FBSyxDQUFDRyxLQUFOLENBQVksQ0FBWixFQUFlLEVBQWYsQ0FBUDtBQUNILEdBSkQsTUFJTztBQUNIUCxJQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxrQkFBWjtBQUNBLFdBQU9MLEtBQUssQ0FBQ1ksR0FBTixDQUFVVCxPQUFWLEVBQW1CVSxJQUFuQixDQUF3QkMsR0FBRyxJQUFJO0FBQ2xDLFVBQUlDLEtBQUssR0FBR0QsR0FBRyxDQUFDRSxJQUFoQjtBQUNBRCxNQUFBQSxLQUFLLENBQUNFLElBQU4sQ0FBVyxVQUFTQyxDQUFULEVBQVlDLENBQVosRUFBZTtBQUN0QixlQUFPQSxDQUFDLENBQUNDLEtBQUYsR0FBVUYsQ0FBQyxDQUFDRSxLQUFuQjtBQUNILE9BRkQ7QUFHQWQsTUFBQUEsWUFBWSxDQUFDZSxPQUFiLENBQXFCbEIsT0FBckIsRUFBOEJNLElBQUksQ0FBQ2EsU0FBTCxDQUFlUixHQUFHLENBQUNFLElBQW5CLENBQTlCO0FBQ0EsYUFBT0QsS0FBSyxDQUFDSixLQUFOLENBQVksQ0FBWixFQUFlLEVBQWYsQ0FBUDtBQUNILEtBUE0sQ0FBUDtBQVFIO0FBQ0osQ0FqQkQ7O0FBb0JBLE1BQU1ZLFFBQU4sQ0FBZTtBQUNYLGVBQWFDLEdBQWIsR0FBbUI7QUFDZixRQUFJVixHQUFHLEdBQUcsTUFBTWQsS0FBSyxDQUFDWSxHQUFOLENBQVUsOEJBQVYsRUFBMENDLElBQTFDLENBQStDQyxHQUFHLElBQUlBLEdBQUcsQ0FBQ0UsSUFBMUQsQ0FBaEI7QUFDQSxXQUFPRixHQUFQO0FBQ0Y7O0FBSlM7O0FBT2YsTUFBTVcsT0FBTixDQUFjO0FBQ1YsZUFBYUQsR0FBYixHQUFtQjtBQUNoQixRQUFJVixHQUFHLEdBQUcsTUFBTWQsS0FBSyxDQUFDWSxHQUFOLENBQVUsMkJBQVYsRUFBdUNDLElBQXZDLENBQTRDYSxJQUFJLElBQUlBLElBQUksQ0FBQ1YsSUFBekQsQ0FBaEI7QUFDQSxXQUFPRixHQUFQO0FBQ0Q7O0FBSlE7O0FBTWQsTUFBTWEsT0FBTixDQUFjO0FBQ1YsZUFBYUgsR0FBYixHQUFtQjtBQUNoQixRQUFJVixHQUFHLEdBQUcsTUFBTWQsS0FBSyxDQUFDWSxHQUFOLENBQVUsNEJBQVYsRUFBd0NDLElBQXhDLENBQTZDYSxJQUFJLElBQUlBLElBQUksQ0FBQ1YsSUFBMUQsQ0FBaEI7QUFDQSxXQUFPRixHQUFQO0FBQ0Q7O0FBSlE7O0FBVWRjLElBQUksQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ2hDLFFBQU1DLFFBQVEsR0FBRyxDQUFDO0FBQ2QsbUJBQWUsZUFERDtBQUVkLFlBQVEsZUFGTTtBQUdkLGFBQVMsR0FISztBQUlkLGtCQUFjO0FBSkEsR0FBRCxDQUFqQjtBQU9BLFFBQU1ILElBQUksR0FBRztBQUFFVixJQUFBQSxJQUFJLEVBQUdhO0FBQVQsR0FBYjtBQUVBN0IsRUFBQUEsS0FBSyxDQUFDWSxHQUFOLENBQVVrQixrQkFBVixDQUE2QixNQUFNQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JOLElBQWhCLENBQW5DO0FBRUEsU0FBT3hCLE9BQU8sQ0FBQ3NCLEdBQVIsR0FBY1gsSUFBZCxDQUFtQkcsSUFBSSxJQUFJaUIsTUFBTSxDQUFDakIsSUFBRCxDQUFOLENBQWFrQixPQUFiLENBQXFCTCxRQUFyQixDQUEzQixDQUFQO0FBRUgsQ0FkRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5cbmNvbnN0IGdldERhdGEgPSBkYXRhVXJsID0+IHtcbiAgICBjb25zb2xlLmxvZyhkYXRhVXJsKTtcbiAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oZGF0YVVybCkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NsYXNzIGNhY2hlZCcpO1xuICAgICAgICBsZXQgc0RhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGRhdGFVcmwpKTtcbiAgICAgICAgcmV0dXJuIHNEYXRhLnNsaWNlKDAsIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnQ2xhc3Mgbm9uIGNhY2hlZCcpO1xuICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KGRhdGFVcmwpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgIGxldCBjRGF0YSA9IHJlcy5kYXRhO1xuICAgICAgICAgICAgY0RhdGEuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGIuc2NvcmUgLSBhLnNjb3JlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShkYXRhVXJsLCBKU09OLnN0cmluZ2lmeShyZXMuZGF0YSkpO1xuICAgICAgICAgICAgcmV0dXJuIGNEYXRhLnNsaWNlKDAsIDEwKTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuXG5jbGFzcyBTdHVkZW50cyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zdHVkZW50cy1zY29yZXMuanNvbicpLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5jbGFzcyBDbGFzc2VzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvY2xhc3Mtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc2Nob29sLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5cbmplc3QubW9jaygnYXhpb3MnKTtcblxudGVzdCgnU2hvdWxkIGZldGNoIFN0dWRlbnRzJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0dWRlbnRzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcInN0YXRlIGNlbnRyYWxcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYWx5Y2UgZmlzY2hlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDk5NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDNcbiAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzdHVkZW50cyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuICAgIFxuICAgIHJldHVybiBnZXREYXRhLmFsbCgpLnRoZW4oZGF0YSA9PiBleHBlY3QoZGF0YSkudG9FcXVhbChzdHVkZW50cykpO1xuXG59KTtcblxuIl19