{"version":3,"sources":["service.test.js"],"names":["jest","mock","axios","require","getData","dataUrl","console","log","localStorage","getItem","sData","JSON","parse","slice","get","then","res","cData","data","sort","a","b","score","setItem","stringify","Students","all","Classes","resp","Schools","test","students","mockImplementation","Promise","resolve","expect","toEqual"],"mappings":"AA4CAA,IAAI,CAACC,IAAL,CAAU,OAAV;;AA5CA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAGA,MAAMC,OAAO,GAAGC,OAAO,IAAI;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,MAAIG,YAAY,CAACC,OAAb,CAAqBJ,OAArB,CAAJ,EAAmC;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,QAAIG,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWJ,YAAY,CAACC,OAAb,CAAqBJ,OAArB,CAAX,CAAZ;AACA,WAAOK,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,EAAf,CAAP;AACH,GAJD,MAIO;AACHP,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,WAAOL,KAAK,CAACY,GAAN,CAAUT,OAAV,EAAmBU,IAAnB,CAAwBC,GAAG,IAAI;AAClC,UAAIC,KAAK,GAAGD,GAAG,CAACE,IAAhB;AACAD,MAAAA,KAAK,CAACE,IAAN,CAAW,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACtB,eAAOA,CAAC,CAACC,KAAF,GAAUF,CAAC,CAACE,KAAnB;AACH,OAFD;AAGAd,MAAAA,YAAY,CAACe,OAAb,CAAqBlB,OAArB,EAA8BM,IAAI,CAACa,SAAL,CAAeR,GAAG,CAACE,IAAnB,CAA9B;AACA,aAAOD,KAAK,CAACJ,KAAN,CAAY,CAAZ,EAAe,EAAf,CAAP;AACH,KAPM,CAAP;AAQH;AACJ,CAjBD;;AAoBA,MAAMY,QAAN,CAAe;AACX,eAAaC,GAAb,GAAmB;AACf,QAAIV,GAAG,GAAG,MAAMd,KAAK,CAACY,GAAN,CAAU,8BAAV,EAA0CC,IAA1C,CAA+CC,GAAG,IAAIA,GAAG,CAACE,IAA1D,CAAhB;AACA,WAAOF,GAAP;AACF;;AAJS;;AAOf,MAAMW,OAAN,CAAc;AACV,eAAaD,GAAb,GAAmB;AAChB,QAAIV,GAAG,GAAG,MAAMd,KAAK,CAACY,GAAN,CAAU,2BAAV,EAAuCC,IAAvC,CAA4Ca,IAAI,IAAIA,IAAI,CAACV,IAAzD,CAAhB;AACA,WAAOF,GAAP;AACD;;AAJQ;;AAMd,MAAMa,OAAN,CAAc;AACV,eAAaH,GAAb,GAAmB;AAChB,QAAIV,GAAG,GAAG,MAAMd,KAAK,CAACY,GAAN,CAAU,4BAAV,EAAwCC,IAAxC,CAA6Ca,IAAI,IAAIA,IAAI,CAACV,IAA1D,CAAhB;AACA,WAAOF,GAAP;AACD;;AAJQ;;AAUdc,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAChC,QAAMC,QAAQ,GAAG,CAAC;AACd,mBAAe,eADD;AAEd,YAAQ,eAFM;AAGd,aAAS,GAHK;AAId,kBAAc;AAJA,GAAD,CAAjB;AAOA,QAAMH,IAAI,GAAG;AAAEV,IAAAA,IAAI,EAAGa;AAAT,GAAb;AAEA7B,EAAAA,KAAK,CAACY,GAAN,CAAUkB,kBAAV,CAA6B,MAAMC,OAAO,CAACC,OAAR,CAAgBN,IAAhB,CAAnC;AAEA,SAAOxB,OAAO,CAACsB,GAAR,GAAcX,IAAd,CAAmBG,IAAI,IAAIiB,MAAM,CAACjB,IAAD,CAAN,CAAakB,OAAb,CAAqBL,QAArB,CAA3B,CAAP;AAEH,CAdG,CAAJ","sourcesContent":["const axios = require('axios');\n\n\nconst getData = dataUrl => {\n    console.log(dataUrl);\n    if (localStorage.getItem(dataUrl)) {\n        console.log('Class cached');\n        let sData = JSON.parse(localStorage.getItem(dataUrl));\n        return sData.slice(0, 10);\n    } else {\n        console.log('Class non cached');\n        return axios.get(dataUrl).then(res => {\n            let cData = res.data;\n            cData.sort(function(a, b) {\n                return b.score - a.score;\n            });\n            localStorage.setItem(dataUrl, JSON.stringify(res.data));\n            return cData.slice(0, 10);\n        });\n    }\n};\n\n\nclass Students {\n    static async all() {\n        let res = await axios.get('../data/students-scores.json').then(res => res.data);\n        return res;\n     }\n}\n\nclass Classes {\n    static async all() {\n       let res = await axios.get('../data/class-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\nclass Schools {\n    static async all() {\n       let res = await axios.get('../data/school-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\n\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 3\n    }];\n\n    const resp = { data : students };\n\n    axios.get.mockImplementation(() => Promise.resolve(resp));\n    \n    return getData.all().then(data => expect(data).toEqual(students));\n\n});\n\n"]}