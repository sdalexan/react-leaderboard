4dfb03c6ec59d7160c2d9cbc22d068a3
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json');
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json');
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json');
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Students.all().then(resp => expect(resp.data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1,
    "class_name": 1
  }, {
    "school_name": "Brsibane High",
    "teacher_name": "Ratliff Wheeler",
    "score": 6880,
    "class_name": 5
  }, {
    "school_name": "Perth Modern School",
    "teacher_name": "Helena Bauer",
    "score": 9137,
    "class_name": 4
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }, {
    "school_name": "state central",
    "admin_name": "Mcintosh Nelson",
    "school_address": "Brsibane, QLD",
    "score": 24623
  }, {
    "school_name": "Gold Coast Primary",
    "admin_name": "Burch Whitfield",
    "school_address": "Gold Coast, QLD",
    "score": 39648
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwiQ2xhc3NlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJyZXNwIiwiZGF0YSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBc0JBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXRCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLGVBQWFDLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDhCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpTOztBQU9mLE1BQU1FLE9BQU4sQ0FBYztBQUNWLGVBQWFILEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDJCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQU1kLE1BQU1HLE9BQU4sQ0FBYztBQUNWLGVBQWFKLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDRCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQVNkSSxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUNoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFFZCxZQUFRLGVBRk07QUFHZCxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsRUFNakI7QUFDSSxtQkFBZSwwQkFEbkI7QUFFSSxZQUFRLFlBRlo7QUFHSSxhQUFTLEdBSGI7QUFJSSxrQkFBYztBQUpsQixHQU5pQixFQVlqQjtBQUNJLG1CQUFlLHlCQURuQjtBQUVJLFlBQVEsZUFGWjtBQUdJLGFBQVMsRUFIYjtBQUlJLGtCQUFjO0FBSmxCLEdBWmlCLENBQWpCO0FBbUJBLFFBQU1DLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdGO0FBQVQsR0FBYjtBQUVBVCxFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVU8sa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCSixJQUFoQixDQUFuQztBQUVBUixFQUFBQSxRQUFRLENBQUNDLEdBQVQsR0FBZVksSUFBZixDQUFvQkwsSUFBSSxJQUFJTSxNQUFNLENBQUNOLElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCTSxPQUFsQixDQUEwQlIsUUFBMUIsQ0FBNUI7QUFDSCxDQXpCRyxDQUFKO0FBMkJBRCxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUUvQixRQUFNVSxPQUFPLEdBQUcsQ0FBRTtBQUNkLG1CQUFlLHlCQUREO0FBRWQsb0JBQWdCLGlCQUZGO0FBR2QsYUFBUyxJQUhLO0FBSWQsa0JBQWMsQ0FKQTtBQUtkLGtCQUFjO0FBTEEsR0FBRixFQU9kO0FBQ0UsbUJBQWUsZUFEakI7QUFFRSxvQkFBZ0IsaUJBRmxCO0FBR0UsYUFBUyxJQUhYO0FBSUUsa0JBQWM7QUFKaEIsR0FQYyxFQWFkO0FBQ0UsbUJBQWUscUJBRGpCO0FBRUUsb0JBQWdCLGNBRmxCO0FBR0UsYUFBUyxJQUhYO0FBSUUsa0JBQWM7QUFKaEIsR0FiYyxDQUFoQjtBQW9CQSxRQUFNUixJQUFJLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFHTztBQUFULEdBQWI7QUFFQWxCLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVTyxrQkFBVixDQUE2QixNQUFNQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JKLElBQWhCLENBQW5DO0FBRUFKLEVBQUFBLE9BQU8sQ0FBQ0gsR0FBUixHQUFjWSxJQUFkLENBQW1CTCxJQUFJLElBQUlNLE1BQU0sQ0FBQ04sSUFBSSxDQUFDQyxJQUFOLENBQU4sQ0FBa0JNLE9BQWxCLENBQTBCQyxPQUExQixDQUEzQjtBQUNILENBM0JHLENBQUo7QUE4QkFWLElBQUksQ0FBQyxzQkFBRCxFQUF5QixNQUFNO0FBQy9CLFFBQU1XLE9BQU8sR0FBRyxDQUFDO0FBQ2IsbUJBQWMsZUFERDtBQUViLGtCQUFhLGVBRkE7QUFHYixzQkFBaUIsaUJBSEo7QUFJYixhQUFRO0FBSkssR0FBRCxFQU1mO0FBQ0csbUJBQWMsZUFEakI7QUFFRyxrQkFBYSxpQkFGaEI7QUFHRyxzQkFBaUIsZUFIcEI7QUFJRyxhQUFRO0FBSlgsR0FOZSxFQVlmO0FBQ0csbUJBQWMsb0JBRGpCO0FBRUcsa0JBQWEsaUJBRmhCO0FBR0csc0JBQWlCLGlCQUhwQjtBQUlHLGFBQVE7QUFKWCxHQVplLENBQWhCO0FBbUJBLFFBQU1ULElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdRO0FBQVQsR0FBYjtBQUVBbkIsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVPLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkosSUFBaEIsQ0FBbkM7QUFFQUgsRUFBQUEsT0FBTyxDQUFDSixHQUFSLEdBQWNZLElBQWQsQ0FBbUJMLElBQUksSUFBSU0sTUFBTSxDQUFDTixJQUFJLENBQUNDLElBQU4sQ0FBTixDQUFrQk0sT0FBbEIsQ0FBMEJFLE9BQTFCLENBQTNCO0FBRUgsQ0ExQkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuY2xhc3MgU3R1ZGVudHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zdHVkZW50cy1zY29yZXMuanNvbicpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cblxuY2xhc3MgQ2xhc3NlcyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL2NsYXNzLXNjb3Jlcy5qc29uJyk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuY2xhc3MgU2Nob29scyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3NjaG9vbC1zY29yZXMuanNvbicpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cblxuamVzdC5tb2NrKCdheGlvcycpO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU3R1ZGVudHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3R1ZGVudHMgPSBbe1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwic3RhdGUgY2VudHJhbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJhbHljZSBmaXNjaGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTk1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiU3lkbmV5IEdpcmxzIEhpZ2ggU2Nob29sXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIkxhcmEgV2FsbHNcIixcbiAgICAgICAgXCJzY29yZVwiOiA3MDksXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiA0XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJGb3J0IFN0cmVldCBIaWdoIFNjaG9vbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJKZW5pZmVyIE1pbGxzXCIsXG4gICAgICAgIFwic2NvcmVcIjogNTUsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiBcIlByZXBcIlxuICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IHN0dWRlbnRzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgICBTdHVkZW50cy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChzdHVkZW50cykpO1xufSk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBDbGFzc2VzJywgKCkgPT4ge1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IFsge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiRm9ydCBTdHJlZXQgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJDb25uaWUgTWNrbmlnaHRcIixcbiAgICAgICAgXCJzY29yZVwiOiA4NTY2LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDFcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJCcnNpYmFuZSBIaWdoXCIsXG4gICAgICAgIFwidGVhY2hlcl9uYW1lXCI6IFwiUmF0bGlmZiBXaGVlbGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogNjg4MCxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJQZXJ0aCBNb2Rlcm4gU2Nob29sXCIsXG4gICAgICAgIFwidGVhY2hlcl9uYW1lXCI6IFwiSGVsZW5hIEJhdWVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTEzNyxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDRcbiAgICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IGNsYXNzZXMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgIENsYXNzZXMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwLmRhdGEpLnRvRXF1YWwoY2xhc3NlcykpO1xufSk7XG5cblxudGVzdCgnU2hvdWxkIGZldGNoIFNjaG9vbHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc2Nob29scyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjpcIkJyc2liYW5lIEhpZ2hcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJCcmFuZGllIE1jZ2VlXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkdvbGQgQ29hc3QsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6OTU2MDhcbiAgICAgfSxcbiAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6XCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwiYWRtaW5fbmFtZVwiOlwiTWNpbnRvc2ggTmVsc29uXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkJyc2liYW5lLCBRTERcIixcbiAgICAgICAgXCJzY29yZVwiOjI0NjIzXG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOlwiR29sZCBDb2FzdCBQcmltYXJ5XCIsXG4gICAgICAgIFwiYWRtaW5fbmFtZVwiOlwiQnVyY2ggV2hpdGZpZWxkXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkdvbGQgQ29hc3QsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6Mzk2NDhcbiAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc2Nob29scyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgU2Nob29scy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChzY2hvb2xzKSk7XG4gICAgXG59KTtcblxuIl19