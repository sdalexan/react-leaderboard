4b8e5ddd963786114bb4aee02df8025c
jest.mock('axios');

const axios = require('axios');

class Students {
  static all() {
    let res = axios.get('../data/students-scores.json').then(res => res.data);
    return res;
  }

}

class Classes {
  static all() {
    let res = axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static all() {
    let res = axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 3
  }];
  const resp = {
    data: students
  };
  axios.get.mockResolvedValue(resp); // axios.get.mockImplementation(() => Promise.resolve(resp));

  return Students.all().then(data => expect(data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }];
  const resp = {
    data: classes
  };
  axios.get.mockResolvedValue(resp);
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }];
  const resp = {
    data: schools
  };
  axios.get.mockResolvedValue(resp);
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsImRhdGEiLCJDbGFzc2VzIiwicmVzcCIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBc0JBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXRCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLFNBQU9DLEdBQVAsR0FBYTtBQUNULFFBQUlDLEdBQUcsR0FBR0osS0FBSyxDQUFDSyxHQUFOLENBQVUsOEJBQVYsRUFBMENDLElBQTFDLENBQStDRixHQUFHLElBQUlBLEdBQUcsQ0FBQ0csSUFBMUQsQ0FBVjtBQUNBLFdBQU9ILEdBQVA7QUFDRjs7QUFKUzs7QUFPZixNQUFNSSxPQUFOLENBQWM7QUFDVixTQUFRTCxHQUFSLEdBQWM7QUFDWCxRQUFJQyxHQUFHLEdBQUlKLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDJCQUFWLEVBQXVDQyxJQUF2QyxDQUE0Q0csSUFBSSxJQUFJQSxJQUFJLENBQUNGLElBQXpELENBQVg7QUFDQSxXQUFPSCxHQUFQO0FBQ0Q7O0FBSlE7O0FBTWQsTUFBTU0sT0FBTixDQUFjO0FBQ1YsU0FBUVAsR0FBUixHQUFjO0FBQ1gsUUFBSUMsR0FBRyxHQUFJSixLQUFLLENBQUNLLEdBQU4sQ0FBVSw0QkFBVixFQUF3Q0MsSUFBeEMsQ0FBNkNHLElBQUksSUFBSUEsSUFBSSxDQUFDRixJQUExRCxDQUFYO0FBQ0EsV0FBT0gsR0FBUDtBQUNEOztBQUpROztBQVNkTyxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUNoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFFZCxZQUFRLGVBRk07QUFHZCxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsQ0FBakI7QUFPQSxRQUFNSCxJQUFJLEdBQUc7QUFBRUYsSUFBQUEsSUFBSSxFQUFHSztBQUFULEdBQWI7QUFDQVosRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVRLGlCQUFWLENBQTRCSixJQUE1QixFQVRnQyxDQVVqQzs7QUFFQyxTQUFPUCxRQUFRLENBQUNDLEdBQVQsR0FBZUcsSUFBZixDQUFvQkMsSUFBSSxJQUFJTyxNQUFNLENBQUNQLElBQUQsQ0FBTixDQUFhUSxPQUFiLENBQXFCSCxRQUFyQixDQUE1QixDQUFQO0FBRUgsQ0FkRyxDQUFKO0FBZ0JBRCxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUUvQixRQUFNSyxPQUFPLEdBQUcsQ0FBRTtBQUNkLG1CQUFlLHlCQUREO0FBRWQsb0JBQWdCLGlCQUZGO0FBR2QsYUFBUyxJQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFGLENBQWhCO0FBT0EsUUFBTVAsSUFBSSxHQUFHO0FBQUVGLElBQUFBLElBQUksRUFBR1M7QUFBVCxHQUFiO0FBRUFoQixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVVEsaUJBQVYsQ0FBNEJKLElBQTVCO0FBRUFELEVBQUFBLE9BQU8sQ0FBQ0wsR0FBUixHQUFjRyxJQUFkLENBQW1CRyxJQUFJLElBQUlLLE1BQU0sQ0FBQ0wsSUFBSSxDQUFDRixJQUFOLENBQU4sQ0FBa0JRLE9BQWxCLENBQTBCQyxPQUExQixDQUEzQjtBQUNILENBZEcsQ0FBSjtBQWdCQUwsSUFBSSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFDL0IsUUFBTU0sT0FBTyxHQUFHLENBQUM7QUFDYixtQkFBYyxlQUREO0FBRWIsa0JBQWEsZUFGQTtBQUdiLHNCQUFpQixpQkFISjtBQUliLGFBQVE7QUFKSyxHQUFELENBQWhCO0FBT0EsUUFBTVIsSUFBSSxHQUFHO0FBQUVGLElBQUFBLElBQUksRUFBR1U7QUFBVCxHQUFiO0FBRUFqQixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVVEsaUJBQVYsQ0FBNEJKLElBQTVCO0FBRUFDLEVBQUFBLE9BQU8sQ0FBQ1AsR0FBUixHQUFjRyxJQUFkLENBQW1CRyxJQUFJLElBQUlLLE1BQU0sQ0FBQ0wsSUFBSSxDQUFDRixJQUFOLENBQU4sQ0FBa0JRLE9BQWxCLENBQTBCRSxPQUExQixDQUEzQjtBQUVILENBZEcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuY2xhc3MgU3R1ZGVudHMge1xuICAgIHN0YXRpYyBhbGwoKSB7XG4gICAgICAgIGxldCByZXMgPSBheGlvcy5nZXQoJy4uL2RhdGEvc3R1ZGVudHMtc2NvcmVzLmpzb24nKS50aGVuKHJlcyA9PiByZXMuZGF0YSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cblxuY2xhc3MgQ2xhc3NlcyB7XG4gICAgc3RhdGljICBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9ICBheGlvcy5nZXQoJy4uL2RhdGEvY2xhc3Mtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gIGF4aW9zLmdldCgnLi4vZGF0YS9zY2hvb2wtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5cbmplc3QubW9jaygnYXhpb3MnKTtcblxudGVzdCgnU2hvdWxkIGZldGNoIFN0dWRlbnRzJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0dWRlbnRzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcInN0YXRlIGNlbnRyYWxcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYWx5Y2UgZmlzY2hlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDk5NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDNcbiAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzdHVkZW50cyB9O1xuICAgIGF4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZShyZXNwKTtcbiAgIC8vIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgIHJldHVybiBTdHVkZW50cy5hbGwoKS50aGVuKGRhdGEgPT4gZXhwZWN0KGRhdGEpLnRvRXF1YWwoc3R1ZGVudHMpKTtcblxufSk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBDbGFzc2VzJywgKCkgPT4ge1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IFsge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiRm9ydCBTdHJlZXQgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJDb25uaWUgTWNrbmlnaHRcIixcbiAgICAgICAgXCJzY29yZVwiOiA4NTY2LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMVxuICAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogY2xhc3NlcyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tSZXNvbHZlZFZhbHVlKHJlc3ApO1xuXG4gICAgQ2xhc3Nlcy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChjbGFzc2VzKSk7XG59KTtcblxudGVzdCgnU2hvdWxkIGZldGNoIFNjaG9vbHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc2Nob29scyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjpcIkJyc2liYW5lIEhpZ2hcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJCcmFuZGllIE1jZ2VlXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkdvbGQgQ29hc3QsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6OTU2MDhcbiAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc2Nob29scyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tSZXNvbHZlZFZhbHVlKHJlc3ApO1xuXG4gICAgU2Nob29scy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChzY2hvb2xzKSk7XG4gICAgXG59KTtcbiJdfQ==