{"version":3,"sources":["service.test.js"],"names":["jest","mock","axios","require","Students","all","get","then","resp","data","console","log","Classes","res","Schools","test","students","mockResolvedValue","expect","toEqual"],"mappings":"AAqBAA,IAAI,CAACC,IAAL,CAAU,OAAV;;AArBA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,QAAN,CAAe;AACX,SAAOC,GAAP,GAAa;AACT,WAAOH,KAAK,CAACI,GAAN,CAAU,+BAAV,EAA2CC,IAA3C,CAAgDC,IAAI,IAAIA,IAAI,CAACC,IAA7D,CAAP;AACF;;AAHS;;AAKfC,OAAO,CAACC,GAAR,CAAYP,QAAZ;;AACA,MAAMQ,OAAN,CAAc;AACV,eAAaP,GAAb,GAAmB;AAChB,QAAIQ,GAAG,GAAG,MAAMX,KAAK,CAACI,GAAN,CAAU,2BAAV,EAAuCC,IAAvC,CAA4CC,IAAI,IAAIA,IAAI,CAACC,IAAzD,CAAhB;AACA,WAAOI,GAAP;AACD;;AAJQ;;AAMd,MAAMC,OAAN,CAAc;AACV,eAAaT,GAAb,GAAmB;AAChB,QAAIQ,GAAG,GAAG,MAAMX,KAAK,CAACI,GAAN,CAAU,4BAAV,EAAwCC,IAAxC,CAA6CC,IAAI,IAAIA,IAAI,CAACC,IAA1D,CAAhB;AACA,WAAOI,GAAP;AACD;;AAJQ;;AASdE,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAChC,QAAMC,QAAQ,GAAG,CAAC;AACd,mBAAe,eADD;AAEd,YAAQ,eAFM;AAGd,aAAS,GAHK;AAId,kBAAc;AAJA,GAAD,CAAjB;AAOA,QAAMR,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAGO;AAAT,GAAb;AACAd,EAAAA,KAAK,CAACI,GAAN,CAAUW,iBAAV,CAA4BT,IAA5B;AAEA,SAAOJ,QAAQ,CAACC,GAAT,GAAeE,IAAf,CAAoBE,IAAI,IAAIS,MAAM,CAACT,IAAD,CAAN,CAAaU,OAAb,CAAqBH,QAArB,CAA5B,CAAP;AACH,CAZG,CAAJ","sourcesContent":["const axios = require('axios');\n\nclass Students {\n    static all() {\n        return axios.get('../data/students-scoress.json').then(resp => resp.data);\n     }\n}\nconsole.log(Students);\nclass Classes {\n    static async all() {\n       let res = await axios.get('../data/class-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\nclass Schools {\n    static async all() {\n       let res = await axios.get('../data/school-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 1\n    }];\n\n    const resp = { data : students };\n    axios.get.mockResolvedValue(resp);\n\n    return Students.all().then(data => expect(data).toEqual(students));\n});\n\n"]}