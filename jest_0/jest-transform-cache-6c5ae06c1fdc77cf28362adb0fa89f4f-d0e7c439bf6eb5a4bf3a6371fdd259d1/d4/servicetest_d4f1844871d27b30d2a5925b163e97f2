a12442c25013a44ff8ec33ebf627b9ff
jest.mock('axios');

const axios = require('axios');

class Students {
  static all() {
    return axios.get('../data/students-scoress.json').then(resp => resp.data);
  }

}

console.log(Students);

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }];
  const resp = {
    data: students
  };
  axios.get.mockResolvedValue(resp);
  return Students.all().then(data => expect(data).toEqual(students));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwiZ2V0IiwidGhlbiIsInJlc3AiLCJkYXRhIiwiY29uc29sZSIsImxvZyIsIkNsYXNzZXMiLCJyZXMiLCJTY2hvb2xzIiwidGVzdCIsInN0dWRlbnRzIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJleHBlY3QiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiQUFxQkFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLE9BQVY7O0FBckJBLE1BQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBRUEsTUFBTUMsUUFBTixDQUFlO0FBQ1gsU0FBT0MsR0FBUCxHQUFhO0FBQ1QsV0FBT0gsS0FBSyxDQUFDSSxHQUFOLENBQVUsK0JBQVYsRUFBMkNDLElBQTNDLENBQWdEQyxJQUFJLElBQUlBLElBQUksQ0FBQ0MsSUFBN0QsQ0FBUDtBQUNGOztBQUhTOztBQUtmQyxPQUFPLENBQUNDLEdBQVIsQ0FBWVAsUUFBWjs7QUFDQSxNQUFNUSxPQUFOLENBQWM7QUFDVixlQUFhUCxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlRLEdBQUcsR0FBRyxNQUFNWCxLQUFLLENBQUNJLEdBQU4sQ0FBVSwyQkFBVixFQUF1Q0MsSUFBdkMsQ0FBNENDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUF6RCxDQUFoQjtBQUNBLFdBQU9JLEdBQVA7QUFDRDs7QUFKUTs7QUFNZCxNQUFNQyxPQUFOLENBQWM7QUFDVixlQUFhVCxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlRLEdBQUcsR0FBRyxNQUFNWCxLQUFLLENBQUNJLEdBQU4sQ0FBVSw0QkFBVixFQUF3Q0MsSUFBeEMsQ0FBNkNDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUExRCxDQUFoQjtBQUNBLFdBQU9JLEdBQVA7QUFDRDs7QUFKUTs7QUFTZEUsSUFBSSxDQUFDLHVCQUFELEVBQTBCLE1BQU07QUFDaEMsUUFBTUMsUUFBUSxHQUFHLENBQUM7QUFDZCxtQkFBZSxlQUREO0FBRWQsWUFBUSxlQUZNO0FBR2QsYUFBUyxHQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFELENBQWpCO0FBT0EsUUFBTVIsSUFBSSxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBR087QUFBVCxHQUFiO0FBQ0FkLEVBQUFBLEtBQUssQ0FBQ0ksR0FBTixDQUFVVyxpQkFBVixDQUE0QlQsSUFBNUI7QUFFQSxTQUFPSixRQUFRLENBQUNDLEdBQVQsR0FBZUUsSUFBZixDQUFvQkUsSUFBSSxJQUFJUyxNQUFNLENBQUNULElBQUQsQ0FBTixDQUFhVSxPQUFiLENBQXFCSCxRQUFyQixDQUE1QixDQUFQO0FBQ0gsQ0FaRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jbGFzcyBTdHVkZW50cyB7XG4gICAgc3RhdGljIGFsbCgpIHtcbiAgICAgICAgcmV0dXJuIGF4aW9zLmdldCgnLi4vZGF0YS9zdHVkZW50cy1zY29yZXNzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgfVxufVxuY29uc29sZS5sb2coU3R1ZGVudHMpO1xuY2xhc3MgQ2xhc3NlcyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL2NsYXNzLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuY2xhc3MgU2Nob29scyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3NjaG9vbC1zY29yZXMuanNvbicpLnRoZW4ocmVzcCA9PiByZXNwLmRhdGEpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cblxuamVzdC5tb2NrKCdheGlvcycpO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU3R1ZGVudHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3R1ZGVudHMgPSBbe1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwic3RhdGUgY2VudHJhbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJhbHljZSBmaXNjaGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTk1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMVxuICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IHN0dWRlbnRzIH07XG4gICAgYXhpb3MuZ2V0Lm1vY2tSZXNvbHZlZFZhbHVlKHJlc3ApO1xuXG4gICAgcmV0dXJuIFN0dWRlbnRzLmFsbCgpLnRoZW4oZGF0YSA9PiBleHBlY3QoZGF0YSkudG9FcXVhbChzdHVkZW50cykpO1xufSk7XG5cbiJdfQ==