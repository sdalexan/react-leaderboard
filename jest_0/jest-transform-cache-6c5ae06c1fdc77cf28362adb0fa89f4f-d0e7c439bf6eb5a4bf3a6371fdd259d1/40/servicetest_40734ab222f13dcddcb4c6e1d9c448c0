05fd666f7fee4aeb39b3adb4e7e85a01
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scoress.json').then(resp => resp.data);
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockResolvedValue(resp); // axios.get.mockImplementation(() => Promise.resolve(resp));
  // Students.all().then(resp => expect(resp.data).toEqual(students));

  return Students.all().then(data => expect(data).toEqual(students));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsInJlc3AiLCJkYXRhIiwiQ2xhc3NlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImV4cGVjdCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiJBQXNCQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVjs7QUF0QkEsTUFBTUMsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFFQSxNQUFNQyxRQUFOLENBQWU7QUFDWCxlQUFhQyxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSwrQkFBVixFQUEyQ0MsSUFBM0MsQ0FBZ0RDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUE3RCxDQUFoQjtBQUNBLFdBQU9KLEdBQVA7QUFDRDs7QUFKUzs7QUFPZixNQUFNSyxPQUFOLENBQWM7QUFDVixlQUFhTixHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSwyQkFBVixFQUF1Q0MsSUFBdkMsQ0FBNENDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUF6RCxDQUFoQjtBQUNBLFdBQU9KLEdBQVA7QUFDRDs7QUFKUTs7QUFNZCxNQUFNTSxPQUFOLENBQWM7QUFDVixlQUFhUCxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSw0QkFBVixFQUF3Q0MsSUFBeEMsQ0FBNkNDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUExRCxDQUFoQjtBQUNBLFdBQU9KLEdBQVA7QUFDRDs7QUFKUTs7QUFTZE8sSUFBSSxDQUFDLHVCQUFELEVBQTBCLE1BQU07QUFDaEMsUUFBTUMsUUFBUSxHQUFHLENBQUM7QUFDZCxtQkFBZSxlQUREO0FBRWQsWUFBUSxlQUZNO0FBR2QsYUFBUyxHQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFELEVBTWpCO0FBQ0ksbUJBQWUsMEJBRG5CO0FBRUksWUFBUSxZQUZaO0FBR0ksYUFBUyxHQUhiO0FBSUksa0JBQWM7QUFKbEIsR0FOaUIsRUFZakI7QUFDSSxtQkFBZSx5QkFEbkI7QUFFSSxZQUFRLGVBRlo7QUFHSSxhQUFTLEVBSGI7QUFJSSxrQkFBYztBQUpsQixHQVppQixDQUFqQjtBQW1CQSxRQUFNTCxJQUFJLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFHSTtBQUFULEdBQWI7QUFDQVosRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVRLGlCQUFWLENBQTRCTixJQUE1QixFQXJCZ0MsQ0FzQmpDO0FBRUE7O0FBQ0MsU0FBT0wsUUFBUSxDQUFDQyxHQUFULEdBQWVHLElBQWYsQ0FBb0JFLElBQUksSUFBSU0sTUFBTSxDQUFDTixJQUFELENBQU4sQ0FBYU8sT0FBYixDQUFxQkgsUUFBckIsQ0FBNUIsQ0FBUDtBQUNILENBMUJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbmNsYXNzIFN0dWRlbnRzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc3R1ZGVudHMtc2NvcmVzcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5jbGFzcyBDbGFzc2VzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvY2xhc3Mtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc2Nob29sLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5qZXN0Lm1vY2soJ2F4aW9zJyk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBTdHVkZW50cycsICgpID0+IHtcbiAgICBjb25zdCBzdHVkZW50cyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImFseWNlIGZpc2NoZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5OTUsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJTeWRuZXkgR2lybHMgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiTGFyYSBXYWxsc1wiLFxuICAgICAgICBcInNjb3JlXCI6IDcwOSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkZvcnQgU3RyZWV0IEhpZ2ggU2Nob29sXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIkplbmlmZXIgTWlsbHNcIixcbiAgICAgICAgXCJzY29yZVwiOiA1NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IFwiUHJlcFwiXG4gICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc3R1ZGVudHMgfTtcbiAgICBheGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUocmVzcCk7XG4gICAvLyBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgIC8vIFN0dWRlbnRzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKHN0dWRlbnRzKSk7XG4gICAgcmV0dXJuIFN0dWRlbnRzLmFsbCgpLnRoZW4oZGF0YSA9PiBleHBlY3QoZGF0YSkudG9FcXVhbChzdHVkZW50cykpO1xufSk7XG5cbiJdfQ==