06d8531a28d19d4a81e97ce52899b02c
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json').then(res => res.data);
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 3
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  return Students.all().then(data => expect(data).toEqual(students));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsImRhdGEiLCJDbGFzc2VzIiwicmVzcCIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsImV4cGVjdCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiJBQXVCQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVjs7QUF2QkEsTUFBTUMsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFFQSxNQUFNQyxRQUFOLENBQWU7QUFDWCxlQUFhQyxHQUFiLEdBQW1CO0FBQ2YsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDhCQUFWLEVBQTBDQyxJQUExQyxDQUErQ0YsR0FBRyxJQUFJQSxHQUFHLENBQUNHLElBQTFELENBQWhCO0FBQ0EsV0FBT0gsR0FBUDtBQUNGOztBQUpTOztBQU9mLE1BQU1JLE9BQU4sQ0FBYztBQUNWLGVBQWFMLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDJCQUFWLEVBQXVDQyxJQUF2QyxDQUE0Q0csSUFBSSxJQUFJQSxJQUFJLENBQUNGLElBQXpELENBQWhCO0FBQ0EsV0FBT0gsR0FBUDtBQUNEOztBQUpROztBQU1kLE1BQU1NLE9BQU4sQ0FBYztBQUNWLGVBQWFQLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDRCQUFWLEVBQXdDQyxJQUF4QyxDQUE2Q0csSUFBSSxJQUFJQSxJQUFJLENBQUNGLElBQTFELENBQWhCO0FBQ0EsV0FBT0gsR0FBUDtBQUNEOztBQUpROztBQVVkTyxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUNoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFFZCxZQUFRLGVBRk07QUFHZCxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsQ0FBakI7QUFPQSxRQUFNSCxJQUFJLEdBQUc7QUFBRUYsSUFBQUEsSUFBSSxFQUFHSztBQUFULEdBQWI7QUFFQVosRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVRLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQk4sSUFBaEIsQ0FBbkM7QUFFQSxTQUFPUCxRQUFRLENBQUNDLEdBQVQsR0FBZUcsSUFBZixDQUFvQkMsSUFBSSxJQUFJUyxNQUFNLENBQUNULElBQUQsQ0FBTixDQUFhVSxPQUFiLENBQXFCTCxRQUFyQixDQUE1QixDQUFQO0FBRUgsQ0FkRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jbGFzcyBTdHVkZW50cyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zdHVkZW50cy1zY29yZXMuanNvbicpLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5jbGFzcyBDbGFzc2VzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvY2xhc3Mtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc2Nob29sLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5cbmplc3QubW9jaygnYXhpb3MnKTtcblxudGVzdCgnU2hvdWxkIGZldGNoIFN0dWRlbnRzJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0dWRlbnRzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcInN0YXRlIGNlbnRyYWxcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYWx5Y2UgZmlzY2hlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDk5NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDNcbiAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzdHVkZW50cyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuICAgIFxuICAgIHJldHVybiBTdHVkZW50cy5hbGwoKS50aGVuKGRhdGEgPT4gZXhwZWN0KGRhdGEpLnRvRXF1YWwoc3R1ZGVudHMpKTtcblxufSk7XG5cbiJdfQ==