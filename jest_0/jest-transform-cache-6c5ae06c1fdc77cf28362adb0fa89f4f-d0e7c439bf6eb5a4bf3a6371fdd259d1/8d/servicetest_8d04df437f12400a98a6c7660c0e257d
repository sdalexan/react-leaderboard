582d150f1e51850c7280ec606e32c987
jest.mock('axios');

const axios = require('axios');

class Students {
  static all() {
    return axios.get('../data/students-scoress.json').then(resp => resp.data);
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 2
  }];
  const resp = {
    data: students
  };
  axios.get.mockResolvedValue(resp);
  return Students.all().then(data => expect(resp).toEqual(students));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwiZ2V0IiwidGhlbiIsInJlc3AiLCJkYXRhIiwiQ2xhc3NlcyIsInJlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImV4cGVjdCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiJBQXFCQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVjs7QUFyQkEsTUFBTUMsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFFQSxNQUFNQyxRQUFOLENBQWU7QUFDWCxTQUFPQyxHQUFQLEdBQWE7QUFDVCxXQUFPSCxLQUFLLENBQUNJLEdBQU4sQ0FBVSwrQkFBVixFQUEyQ0MsSUFBM0MsQ0FBZ0RDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUE3RCxDQUFQO0FBQ0Y7O0FBSFM7O0FBTWYsTUFBTUMsT0FBTixDQUFjO0FBQ1YsZUFBYUwsR0FBYixHQUFtQjtBQUNoQixRQUFJTSxHQUFHLEdBQUcsTUFBTVQsS0FBSyxDQUFDSSxHQUFOLENBQVUsMkJBQVYsRUFBdUNDLElBQXZDLENBQTRDQyxJQUFJLElBQUlBLElBQUksQ0FBQ0MsSUFBekQsQ0FBaEI7QUFDQSxXQUFPRSxHQUFQO0FBQ0Q7O0FBSlE7O0FBTWQsTUFBTUMsT0FBTixDQUFjO0FBQ1YsZUFBYVAsR0FBYixHQUFtQjtBQUNoQixRQUFJTSxHQUFHLEdBQUcsTUFBTVQsS0FBSyxDQUFDSSxHQUFOLENBQVUsNEJBQVYsRUFBd0NDLElBQXhDLENBQTZDQyxJQUFJLElBQUlBLElBQUksQ0FBQ0MsSUFBMUQsQ0FBaEI7QUFDQSxXQUFPRSxHQUFQO0FBQ0Q7O0FBSlE7O0FBU2RFLElBQUksQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ2hDLFFBQU1DLFFBQVEsR0FBRyxDQUFDO0FBQ2QsbUJBQWUsZUFERDtBQUVkLFlBQVEsZUFGTTtBQUdkLGFBQVMsR0FISztBQUlkLGtCQUFjO0FBSkEsR0FBRCxDQUFqQjtBQU9BLFFBQU1OLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdLO0FBQVQsR0FBYjtBQUNBWixFQUFBQSxLQUFLLENBQUNJLEdBQU4sQ0FBVVMsaUJBQVYsQ0FBNEJQLElBQTVCO0FBRUEsU0FBT0osUUFBUSxDQUFDQyxHQUFULEdBQWVFLElBQWYsQ0FBb0JFLElBQUksSUFBSU8sTUFBTSxDQUFDUixJQUFELENBQU4sQ0FBYVMsT0FBYixDQUFxQkgsUUFBckIsQ0FBNUIsQ0FBUDtBQUNILENBWkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuY2xhc3MgU3R1ZGVudHMge1xuICAgIHN0YXRpYyBhbGwoKSB7XG4gICAgICAgIHJldHVybiBheGlvcy5nZXQoJy4uL2RhdGEvc3R1ZGVudHMtc2NvcmVzcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgIH1cbn1cblxuY2xhc3MgQ2xhc3NlcyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL2NsYXNzLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuY2xhc3MgU2Nob29scyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3NjaG9vbC1zY29yZXMuanNvbicpLnRoZW4ocmVzcCA9PiByZXNwLmRhdGEpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cblxuamVzdC5tb2NrKCdheGlvcycpO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU3R1ZGVudHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3R1ZGVudHMgPSBbe1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwic3RhdGUgY2VudHJhbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJhbHljZSBmaXNjaGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTk1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMlxuICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IHN0dWRlbnRzIH07XG4gICAgYXhpb3MuZ2V0Lm1vY2tSZXNvbHZlZFZhbHVlKHJlc3ApO1xuXG4gICAgcmV0dXJuIFN0dWRlbnRzLmFsbCgpLnRoZW4oZGF0YSA9PiBleHBlY3QocmVzcCkudG9FcXVhbChzdHVkZW50cykpO1xufSk7XG5cbiJdfQ==