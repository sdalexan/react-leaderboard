9934fad848cb2f1a4992c1e332781223
jest.mock('axios');

const axios = require('axios');

class Students {
  static all() {
    let res = axios.get('../data/students-scores.json').then(res => res.data);
    return res;
  }

}

class Classes {
  static all() {
    let res = axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static all() {
    let res = axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 3
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  return Students.all().then(data => expect(data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsImRhdGEiLCJDbGFzc2VzIiwicmVzcCIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBc0JBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXRCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLFNBQU9DLEdBQVAsR0FBYTtBQUNULFFBQUlDLEdBQUcsR0FBR0osS0FBSyxDQUFDSyxHQUFOLENBQVUsOEJBQVYsRUFBMENDLElBQTFDLENBQStDRixHQUFHLElBQUlBLEdBQUcsQ0FBQ0csSUFBMUQsQ0FBVjtBQUNBLFdBQU9ILEdBQVA7QUFDRjs7QUFKUzs7QUFPZixNQUFNSSxPQUFOLENBQWM7QUFDVixTQUFPTCxHQUFQLEdBQWE7QUFDVixRQUFJQyxHQUFHLEdBQUdKLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDJCQUFWLEVBQXVDQyxJQUF2QyxDQUE0Q0csSUFBSSxJQUFJQSxJQUFJLENBQUNGLElBQXpELENBQVY7QUFDQSxXQUFPSCxHQUFQO0FBQ0Q7O0FBSlE7O0FBTWQsTUFBTU0sT0FBTixDQUFjO0FBQ1YsU0FBT1AsR0FBUCxHQUFhO0FBQ1YsUUFBSUMsR0FBRyxHQUFHSixLQUFLLENBQUNLLEdBQU4sQ0FBVSw0QkFBVixFQUF3Q0MsSUFBeEMsQ0FBNkNHLElBQUksSUFBSUEsSUFBSSxDQUFDRixJQUExRCxDQUFWO0FBQ0EsV0FBT0gsR0FBUDtBQUNEOztBQUpROztBQVNkTyxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUNoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFFZCxZQUFRLGVBRk07QUFHZCxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsQ0FBakI7QUFPQSxRQUFNSCxJQUFJLEdBQUc7QUFBRUYsSUFBQUEsSUFBSSxFQUFHSztBQUFULEdBQWI7QUFFQVosRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVRLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQk4sSUFBaEIsQ0FBbkM7QUFFQSxTQUFPUCxRQUFRLENBQUNDLEdBQVQsR0FBZUcsSUFBZixDQUFvQkMsSUFBSSxJQUFJUyxNQUFNLENBQUNULElBQUQsQ0FBTixDQUFhVSxPQUFiLENBQXFCTCxRQUFyQixDQUE1QixDQUFQO0FBRUgsQ0FkRyxDQUFKO0FBZ0JBRCxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUUvQixRQUFNTyxPQUFPLEdBQUcsQ0FBRTtBQUNkLG1CQUFlLHlCQUREO0FBRWQsb0JBQWdCLGlCQUZGO0FBR2QsYUFBUyxJQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFGLENBQWhCO0FBT0EsUUFBTVQsSUFBSSxHQUFHO0FBQUVGLElBQUFBLElBQUksRUFBR1c7QUFBVCxHQUFiO0FBRUFsQixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVVEsa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCTixJQUFoQixDQUFuQztBQUVBRCxFQUFBQSxPQUFPLENBQUNMLEdBQVIsR0FBY0csSUFBZCxDQUFtQkcsSUFBSSxJQUFJTyxNQUFNLENBQUNQLElBQUksQ0FBQ0YsSUFBTixDQUFOLENBQWtCVSxPQUFsQixDQUEwQkMsT0FBMUIsQ0FBM0I7QUFDSCxDQWRHLENBQUo7QUFnQkFQLElBQUksQ0FBQyxzQkFBRCxFQUF5QixNQUFNO0FBQy9CLFFBQU1RLE9BQU8sR0FBRyxDQUFDO0FBQ2IsbUJBQWMsZUFERDtBQUViLGtCQUFhLGVBRkE7QUFHYixzQkFBaUIsaUJBSEo7QUFJYixhQUFRO0FBSkssR0FBRCxDQUFoQjtBQU9BLFFBQU1WLElBQUksR0FBRztBQUFFRixJQUFBQSxJQUFJLEVBQUdZO0FBQVQsR0FBYjtBQUVBbkIsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVRLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQk4sSUFBaEIsQ0FBbkM7QUFFQUMsRUFBQUEsT0FBTyxDQUFDUCxHQUFSLEdBQWNHLElBQWQsQ0FBbUJHLElBQUksSUFBSU8sTUFBTSxDQUFDUCxJQUFJLENBQUNGLElBQU4sQ0FBTixDQUFrQlUsT0FBbEIsQ0FBMEJFLE9BQTFCLENBQTNCO0FBRUgsQ0FkRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jbGFzcyBTdHVkZW50cyB7XG4gICAgc3RhdGljIGFsbCgpIHtcbiAgICAgICAgbGV0IHJlcyA9IGF4aW9zLmdldCgnLi4vZGF0YS9zdHVkZW50cy1zY29yZXMuanNvbicpLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5jbGFzcyBDbGFzc2VzIHtcbiAgICBzdGF0aWMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBheGlvcy5nZXQoJy4uL2RhdGEvY2xhc3Mtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBheGlvcy5nZXQoJy4uL2RhdGEvc2Nob29sLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5qZXN0Lm1vY2soJ2F4aW9zJyk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBTdHVkZW50cycsICgpID0+IHtcbiAgICBjb25zdCBzdHVkZW50cyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImFseWNlIGZpc2NoZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5OTUsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAzXG4gICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc3R1ZGVudHMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgIHJldHVybiBTdHVkZW50cy5hbGwoKS50aGVuKGRhdGEgPT4gZXhwZWN0KGRhdGEpLnRvRXF1YWwoc3R1ZGVudHMpKTtcblxufSk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBDbGFzc2VzJywgKCkgPT4ge1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IFsge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiRm9ydCBTdHJlZXQgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJDb25uaWUgTWNrbmlnaHRcIixcbiAgICAgICAgXCJzY29yZVwiOiA4NTY2LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMVxuICAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogY2xhc3NlcyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgQ2xhc3Nlcy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChjbGFzc2VzKSk7XG59KTtcblxudGVzdCgnU2hvdWxkIGZldGNoIFNjaG9vbHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc2Nob29scyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjpcIkJyc2liYW5lIEhpZ2hcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJCcmFuZGllIE1jZ2VlXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkdvbGQgQ29hc3QsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6OTU2MDhcbiAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc2Nob29scyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgU2Nob29scy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChzY2hvb2xzKSk7XG4gICAgXG59KTtcbiJdfQ==