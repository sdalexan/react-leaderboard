{"version":3,"sources":["service.test.js"],"names":["jest","mock","axios","require","Students","all","res","get","then","data","Classes","resp","Schools","test","students","mockImplementation","Promise","resolve","expect","toEqual","classes","schools"],"mappings":"AAsBAA,IAAI,CAACC,IAAL,CAAU,OAAV;;AAtBA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,QAAN,CAAe;AACX,SAAOC,GAAP,GAAa;AACT,QAAIC,GAAG,GAAGJ,KAAK,CAACK,GAAN,CAAU,8BAAV,EAA0CC,IAA1C,CAA+CF,GAAG,IAAIA,GAAG,CAACG,IAA1D,CAAV;AACA,WAAOH,GAAP;AACF;;AAJS;;AAOf,MAAMI,OAAN,CAAc;AACV,SAAOL,GAAP,GAAa;AACV,QAAIC,GAAG,GAAGJ,KAAK,CAACK,GAAN,CAAU,2BAAV,EAAuCC,IAAvC,CAA4CG,IAAI,IAAIA,IAAI,CAACF,IAAzD,CAAV;AACA,WAAOH,GAAP;AACD;;AAJQ;;AAMd,MAAMM,OAAN,CAAc;AACV,SAAOP,GAAP,GAAa;AACV,QAAIC,GAAG,GAAGJ,KAAK,CAACK,GAAN,CAAU,4BAAV,EAAwCC,IAAxC,CAA6CG,IAAI,IAAIA,IAAI,CAACF,IAA1D,CAAV;AACA,WAAOH,GAAP;AACD;;AAJQ;;AASdO,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAChC,QAAMC,QAAQ,GAAG,CAAC;AACd,mBAAe,eADD;AAEd,YAAQ,eAFM;AAGd,aAAS,GAHK;AAId,kBAAc;AAJA,GAAD,CAAjB;AAOA,QAAMH,IAAI,GAAG;AAAEF,IAAAA,IAAI,EAAGK;AAAT,GAAb;AAEAZ,EAAAA,KAAK,CAACK,GAAN,CAAUQ,kBAAV,CAA6B,MAAMC,OAAO,CAACC,OAAR,CAAgBN,IAAhB,CAAnC;AAEA,SAAOP,QAAQ,CAACC,GAAT,GAAeG,IAAf,CAAoBC,IAAI,IAAIS,MAAM,CAACT,IAAD,CAAN,CAAaU,OAAb,CAAqBL,QAArB,CAA5B,CAAP;AAEH,CAdG,CAAJ;AAgBAD,IAAI,CAAC,sBAAD,EAAyB,MAAM;AAE/B,QAAMO,OAAO,GAAG,CAAE;AACd,mBAAe,yBADD;AAEd,oBAAgB,iBAFF;AAGd,aAAS,IAHK;AAId,kBAAc;AAJA,GAAF,CAAhB;AAOA,QAAMT,IAAI,GAAG;AAAEF,IAAAA,IAAI,EAAGW;AAAT,GAAb;AAEAlB,EAAAA,KAAK,CAACK,GAAN,CAAUQ,kBAAV,CAA6B,MAAMC,OAAO,CAACC,OAAR,CAAgBN,IAAhB,CAAnC;AAEAD,EAAAA,OAAO,CAACL,GAAR,GAAcG,IAAd,CAAmBG,IAAI,IAAIO,MAAM,CAACP,IAAI,CAACF,IAAN,CAAN,CAAkBU,OAAlB,CAA0BC,OAA1B,CAA3B;AACH,CAdG,CAAJ;AAgBAP,IAAI,CAAC,sBAAD,EAAyB,MAAM;AAC/B,QAAMQ,OAAO,GAAG,CAAC;AACb,mBAAc,eADD;AAEb,kBAAa,eAFA;AAGb,sBAAiB,iBAHJ;AAIb,aAAQ;AAJK,GAAD,CAAhB;AAOA,QAAMV,IAAI,GAAG;AAAEF,IAAAA,IAAI,EAAGY;AAAT,GAAb;AAEAnB,EAAAA,KAAK,CAACK,GAAN,CAAUQ,kBAAV,CAA6B,MAAMC,OAAO,CAACC,OAAR,CAAgBN,IAAhB,CAAnC;AAEAC,EAAAA,OAAO,CAACP,GAAR,GAAcG,IAAd,CAAmBG,IAAI,IAAIO,MAAM,CAACP,IAAI,CAACF,IAAN,CAAN,CAAkBU,OAAlB,CAA0BE,OAA1B,CAA3B;AAEH,CAdG,CAAJ","sourcesContent":["const axios = require('axios');\n\nclass Students {\n    static all() {\n        let res = axios.get('../data/students-scores.json').then(res => res.data);\n        return res;\n     }\n}\n\nclass Classes {\n    static all() {\n       let res = axios.get('../data/class-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\nclass Schools {\n    static all() {\n       let res = axios.get('../data/school-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 3\n    }];\n\n    const resp = { data : students };\n\n    axios.get.mockImplementation(() => Promise.resolve(resp));\n\n    return Students.all().then(data => expect(data).toEqual(students));\n\n});\n\ntest('Should fetch Classes', () => {\n\n    const classes = [ {\n        \"school_name\": \"Fort Street High School\",\n        \"teacher_name\": \"Connie Mcknight\",\n        \"score\": 8566,\n        \"class_name\": 1\n      }];\n\n    const resp = { data : classes };\n\n    axios.get.mockImplementation(() => Promise.resolve(resp));\n\n    Classes.all().then(resp => expect(resp.data).toEqual(classes));\n});\n\ntest('Should fetch Schools', () => {\n    const schools = [{\n        \"school_name\":\"Brsibane High\",\n        \"admin_name\":\"Brandie Mcgee\",\n        \"school_address\":\"Gold Coast, QLD\",\n        \"score\":95608\n     }];\n\n    const resp = { data : schools };\n\n    axios.get.mockImplementation(() => Promise.resolve(resp));\n\n    Schools.all().then(resp => expect(resp.data).toEqual(schools));\n    \n});\n"]}