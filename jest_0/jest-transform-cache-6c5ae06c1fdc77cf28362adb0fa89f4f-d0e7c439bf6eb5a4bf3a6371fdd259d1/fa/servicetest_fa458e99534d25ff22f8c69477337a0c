ad329e2038bc7b96584c3491c2702ef6
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json').then(res => res.data);
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 3
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  return Students.all().then(data => expect(data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsImRhdGEiLCJDbGFzc2VzIiwicmVzcCIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBc0JBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXRCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLGVBQWFDLEdBQWIsR0FBbUI7QUFDZixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsOEJBQVYsRUFBMENDLElBQTFDLENBQStDRixHQUFHLElBQUlBLEdBQUcsQ0FBQ0csSUFBMUQsQ0FBaEI7QUFDQSxXQUFPSCxHQUFQO0FBQ0Y7O0FBSlM7O0FBT2YsTUFBTUksT0FBTixDQUFjO0FBQ1YsZUFBYUwsR0FBYixHQUFtQjtBQUNoQixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsMkJBQVYsRUFBdUNDLElBQXZDLENBQTRDRyxJQUFJLElBQUlBLElBQUksQ0FBQ0YsSUFBekQsQ0FBaEI7QUFDQSxXQUFPSCxHQUFQO0FBQ0Q7O0FBSlE7O0FBTWQsTUFBTU0sT0FBTixDQUFjO0FBQ1YsZUFBYVAsR0FBYixHQUFtQjtBQUNoQixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsNEJBQVYsRUFBd0NDLElBQXhDLENBQTZDRyxJQUFJLElBQUlBLElBQUksQ0FBQ0YsSUFBMUQsQ0FBaEI7QUFDQSxXQUFPSCxHQUFQO0FBQ0Q7O0FBSlE7O0FBU2RPLElBQUksQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ2hDLFFBQU1DLFFBQVEsR0FBRyxDQUFDO0FBQ2QsbUJBQWUsZUFERDtBQUVkLFlBQVEsZUFGTTtBQUdkLGFBQVMsR0FISztBQUlkLGtCQUFjO0FBSkEsR0FBRCxDQUFqQjtBQU9BLFFBQU1ILElBQUksR0FBRztBQUFFRixJQUFBQSxJQUFJLEVBQUdLO0FBQVQsR0FBYjtBQUVBWixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVVEsa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCTixJQUFoQixDQUFuQztBQUVBLFNBQU9QLFFBQVEsQ0FBQ0MsR0FBVCxHQUFlRyxJQUFmLENBQW9CQyxJQUFJLElBQUlTLE1BQU0sQ0FBQ1QsSUFBRCxDQUFOLENBQWFVLE9BQWIsQ0FBcUJMLFFBQXJCLENBQTVCLENBQVA7QUFFSCxDQWRHLENBQUo7QUFnQkFELElBQUksQ0FBQyxzQkFBRCxFQUF5QixNQUFNO0FBRS9CLFFBQU1PLE9BQU8sR0FBRyxDQUFFO0FBQ2QsbUJBQWUseUJBREQ7QUFFZCxvQkFBZ0IsaUJBRkY7QUFHZCxhQUFTLElBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUYsQ0FBaEI7QUFPQSxRQUFNVCxJQUFJLEdBQUc7QUFBRUYsSUFBQUEsSUFBSSxFQUFHVztBQUFULEdBQWI7QUFFQWxCLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVUSxrQkFBVixDQUE2QixNQUFNQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JOLElBQWhCLENBQW5DO0FBRUFELEVBQUFBLE9BQU8sQ0FBQ0wsR0FBUixHQUFjRyxJQUFkLENBQW1CRyxJQUFJLElBQUlPLE1BQU0sQ0FBQ1AsSUFBSSxDQUFDRixJQUFOLENBQU4sQ0FBa0JVLE9BQWxCLENBQTBCQyxPQUExQixDQUEzQjtBQUNILENBZEcsQ0FBSjtBQWdCQVAsSUFBSSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFDL0IsUUFBTVEsT0FBTyxHQUFHLENBQUM7QUFDYixtQkFBYyxlQUREO0FBRWIsa0JBQWEsZUFGQTtBQUdiLHNCQUFpQixpQkFISjtBQUliLGFBQVE7QUFKSyxHQUFELENBQWhCO0FBT0EsUUFBTVYsSUFBSSxHQUFHO0FBQUVGLElBQUFBLElBQUksRUFBR1k7QUFBVCxHQUFiO0FBRUFuQixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVVEsa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCTixJQUFoQixDQUFuQztBQUVBQyxFQUFBQSxPQUFPLENBQUNQLEdBQVIsR0FBY0csSUFBZCxDQUFtQkcsSUFBSSxJQUFJTyxNQUFNLENBQUNQLElBQUksQ0FBQ0YsSUFBTixDQUFOLENBQWtCVSxPQUFsQixDQUEwQkUsT0FBMUIsQ0FBM0I7QUFFSCxDQWRHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbmNsYXNzIFN0dWRlbnRzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3N0dWRlbnRzLXNjb3Jlcy5qc29uJykudGhlbihyZXMgPT4gcmVzLmRhdGEpO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5cbmNsYXNzIENsYXNzZXMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9jbGFzcy1zY29yZXMuanNvbicpLnRoZW4ocmVzcCA9PiByZXNwLmRhdGEpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cbmNsYXNzIFNjaG9vbHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zY2hvb2wtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5cbmplc3QubW9jaygnYXhpb3MnKTtcblxudGVzdCgnU2hvdWxkIGZldGNoIFN0dWRlbnRzJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0dWRlbnRzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcInN0YXRlIGNlbnRyYWxcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYWx5Y2UgZmlzY2hlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDk5NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDNcbiAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzdHVkZW50cyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgcmV0dXJuIFN0dWRlbnRzLmFsbCgpLnRoZW4oZGF0YSA9PiBleHBlY3QoZGF0YSkudG9FcXVhbChzdHVkZW50cykpO1xuXG59KTtcblxudGVzdCgnU2hvdWxkIGZldGNoIENsYXNzZXMnLCAoKSA9PiB7XG5cbiAgICBjb25zdCBjbGFzc2VzID0gWyB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJGb3J0IFN0cmVldCBIaWdoIFNjaG9vbFwiLFxuICAgICAgICBcInRlYWNoZXJfbmFtZVwiOiBcIkNvbm5pZSBNY2tuaWdodFwiLFxuICAgICAgICBcInNjb3JlXCI6IDg1NjYsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAxXG4gICAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBjbGFzc2VzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgICBDbGFzc2VzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKGNsYXNzZXMpKTtcbn0pO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU2Nob29scycsICgpID0+IHtcbiAgICBjb25zdCBzY2hvb2xzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOlwiQnJzaWJhbmUgSGlnaFwiLFxuICAgICAgICBcImFkbWluX25hbWVcIjpcIkJyYW5kaWUgTWNnZWVcIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiR29sZCBDb2FzdCwgUUxEXCIsXG4gICAgICAgIFwic2NvcmVcIjo5NTYwOFxuICAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzY2hvb2xzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgICBTY2hvb2xzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKHNjaG9vbHMpKTtcbiAgICBcbn0pO1xuIl19