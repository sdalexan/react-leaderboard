6d257b0cf7705febbfb982913deca9e4
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json');
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json');
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json');
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Students.all().then(resp => expect(resp.data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }, {
    "school_name": "Brsibane High",
    "teacher_name": "Ratliff Wheeler",
    "score": 6880,
    "class_name": 5
  }, {
    "school_name": "Perth Modern School",
    "teacher_name": "Helena Bauer",
    "score": 9137,
    "class_name": 4
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }, {
    "school_name": "state centralll",
    "admin_name": "Mcintosh Nelson",
    "school_address": "Brsibane, QLD",
    "score": 24623
  }, {
    "school_name": "Gold Coast Primary",
    "admin_name": "Burch Whitfield",
    "school_address": "Gold Coast, QLD",
    "score": 39648
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwiQ2xhc3NlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJyZXNwIiwiZGF0YSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBcUJBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXJCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLGVBQWFDLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDhCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpTOztBQU1mLE1BQU1FLE9BQU4sQ0FBYztBQUNWLGVBQWFILEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDJCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQU1kLE1BQU1HLE9BQU4sQ0FBYztBQUNWLGVBQWFKLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDRCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQVNkSSxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUVoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFFZCxZQUFRLGVBRk07QUFHZCxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsRUFNakI7QUFDSSxtQkFBZSwwQkFEbkI7QUFFSSxZQUFRLFlBRlo7QUFHSSxhQUFTLEdBSGI7QUFJSSxrQkFBYztBQUpsQixHQU5pQixFQVlqQjtBQUNJLG1CQUFlLHlCQURuQjtBQUVJLFlBQVEsZUFGWjtBQUdJLGFBQVMsRUFIYjtBQUlJLGtCQUFjO0FBSmxCLEdBWmlCLENBQWpCO0FBbUJBLFFBQU1DLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdGO0FBQVQsR0FBYjtBQUVBVCxFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVU8sa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCSixJQUFoQixDQUFuQztBQUVBUixFQUFBQSxRQUFRLENBQUNDLEdBQVQsR0FBZVksSUFBZixDQUFvQkwsSUFBSSxJQUFJTSxNQUFNLENBQUNOLElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCTSxPQUFsQixDQUEwQlIsUUFBMUIsQ0FBNUI7QUFDSCxDQTFCRyxDQUFKO0FBNEJBRCxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUUvQixRQUFNVSxPQUFPLEdBQUcsQ0FBRTtBQUNkLG1CQUFlLHlCQUREO0FBRWQsb0JBQWdCLGlCQUZGO0FBR2QsYUFBUyxJQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFGLEVBTWQ7QUFDRSxtQkFBZSxlQURqQjtBQUVFLG9CQUFnQixpQkFGbEI7QUFHRSxhQUFTLElBSFg7QUFJRSxrQkFBYztBQUpoQixHQU5jLEVBWWQ7QUFDRSxtQkFBZSxxQkFEakI7QUFFRSxvQkFBZ0IsY0FGbEI7QUFHRSxhQUFTLElBSFg7QUFJRSxrQkFBYztBQUpoQixHQVpjLENBQWhCO0FBbUJBLFFBQU1SLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdPO0FBQVQsR0FBYjtBQUVBbEIsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVPLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkosSUFBaEIsQ0FBbkM7QUFFQUosRUFBQUEsT0FBTyxDQUFDSCxHQUFSLEdBQWNZLElBQWQsQ0FBbUJMLElBQUksSUFBSU0sTUFBTSxDQUFDTixJQUFJLENBQUNDLElBQU4sQ0FBTixDQUFrQk0sT0FBbEIsQ0FBMEJDLE9BQTFCLENBQTNCO0FBQ0gsQ0ExQkcsQ0FBSjtBQTZCQVYsSUFBSSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFFL0IsUUFBTVcsT0FBTyxHQUFHLENBQUM7QUFDYixtQkFBYyxlQUREO0FBRWIsa0JBQWEsZUFGQTtBQUdiLHNCQUFpQixpQkFISjtBQUliLGFBQVE7QUFKSyxHQUFELEVBTWY7QUFDRyxtQkFBYyxpQkFEakI7QUFFRyxrQkFBYSxpQkFGaEI7QUFHRyxzQkFBaUIsZUFIcEI7QUFJRyxhQUFRO0FBSlgsR0FOZSxFQVlmO0FBQ0csbUJBQWMsb0JBRGpCO0FBRUcsa0JBQWEsaUJBRmhCO0FBR0csc0JBQWlCLGlCQUhwQjtBQUlHLGFBQVE7QUFKWCxHQVplLENBQWhCO0FBbUJBLFFBQU1ULElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdRO0FBQVQsR0FBYjtBQUVBbkIsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVPLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkosSUFBaEIsQ0FBbkM7QUFFQUgsRUFBQUEsT0FBTyxDQUFDSixHQUFSLEdBQWNZLElBQWQsQ0FBbUJMLElBQUksSUFBSU0sTUFBTSxDQUFDTixJQUFJLENBQUNDLElBQU4sQ0FBTixDQUFrQk0sT0FBbEIsQ0FBMEJFLE9BQTFCLENBQTNCO0FBQ0gsQ0ExQkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuY2xhc3MgU3R1ZGVudHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zdHVkZW50cy1zY29yZXMuanNvbicpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cbmNsYXNzIENsYXNzZXMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9jbGFzcy1zY29yZXMuanNvbicpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cbmNsYXNzIFNjaG9vbHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zY2hvb2wtc2NvcmVzLmpzb24nKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5cbmplc3QubW9jaygnYXhpb3MnKTtcblxudGVzdCgnU2hvdWxkIGZldGNoIFN0dWRlbnRzJywgKCkgPT4ge1xuXG4gICAgY29uc3Qgc3R1ZGVudHMgPSBbe1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwic3RhdGUgY2VudHJhbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJhbHljZSBmaXNjaGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTk1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMVxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiU3lkbmV5IEdpcmxzIEhpZ2ggU2Nob29sXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIkxhcmEgV2FsbHNcIixcbiAgICAgICAgXCJzY29yZVwiOiA3MDksXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiA0XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJGb3J0IFN0cmVldCBIaWdoIFNjaG9vbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJKZW5pZmVyIE1pbGxzXCIsXG4gICAgICAgIFwic2NvcmVcIjogNTUsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiBcIlByZXBcIlxuICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IHN0dWRlbnRzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgICBTdHVkZW50cy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChzdHVkZW50cykpO1xufSk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBDbGFzc2VzJywgKCkgPT4ge1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IFsge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiRm9ydCBTdHJlZXQgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJDb25uaWUgTWNrbmlnaHRcIixcbiAgICAgICAgXCJzY29yZVwiOiA4NTY2LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkJyc2liYW5lIEhpZ2hcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJSYXRsaWZmIFdoZWVsZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA2ODgwLFxuICAgICAgICBcImNsYXNzX25hbWVcIjogNVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIlBlcnRoIE1vZGVybiBTY2hvb2xcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJIZWxlbmEgQmF1ZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5MTM3LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogNFxuICAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogY2xhc3NlcyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgQ2xhc3Nlcy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChjbGFzc2VzKSk7XG59KTtcblxuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU2Nob29scycsICgpID0+IHtcblxuICAgIGNvbnN0IHNjaG9vbHMgPSBbe1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6XCJCcnNpYmFuZSBIaWdoXCIsXG4gICAgICAgIFwiYWRtaW5fbmFtZVwiOlwiQnJhbmRpZSBNY2dlZVwiLFxuICAgICAgICBcInNjaG9vbF9hZGRyZXNzXCI6XCJHb2xkIENvYXN0LCBRTERcIixcbiAgICAgICAgXCJzY29yZVwiOjk1NjA4XG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOlwic3RhdGUgY2VudHJhbGxsXCIsXG4gICAgICAgIFwiYWRtaW5fbmFtZVwiOlwiTWNpbnRvc2ggTmVsc29uXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkJyc2liYW5lLCBRTERcIixcbiAgICAgICAgXCJzY29yZVwiOjI0NjIzXG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOlwiR29sZCBDb2FzdCBQcmltYXJ5XCIsXG4gICAgICAgIFwiYWRtaW5fbmFtZVwiOlwiQnVyY2ggV2hpdGZpZWxkXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkdvbGQgQ29hc3QsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6Mzk2NDhcbiAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc2Nob29scyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgU2Nob29scy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChzY2hvb2xzKSk7XG59KTsiXX0=