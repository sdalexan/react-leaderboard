9791791485bb4d9e41a43f47eb5fce6f
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json').then(res => res.data);
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 3
  }];
  const resp = {
    data: students
  };
  axios.get.mockResolvedValue(resp); // axios.get.mockImplementation(() => Promise.resolve(resp));

  return Students.all().then(data => expect(data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }];
  const resp = {
    data: classes
  };
  axios.get.mockResolvedValue(resp);
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }];
  const resp = {
    data: schools
  };
  axios.get.mockResolvedValue(resp);
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsImRhdGEiLCJDbGFzc2VzIiwicmVzcCIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBc0JBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXRCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLGVBQWFDLEdBQWIsR0FBbUI7QUFDZixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsOEJBQVYsRUFBMENDLElBQTFDLENBQStDRixHQUFHLElBQUlBLEdBQUcsQ0FBQ0csSUFBMUQsQ0FBaEI7QUFDQSxXQUFPSCxHQUFQO0FBQ0Y7O0FBSlM7O0FBT2YsTUFBTUksT0FBTixDQUFjO0FBQ1YsZUFBYUwsR0FBYixHQUFtQjtBQUNoQixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsMkJBQVYsRUFBdUNDLElBQXZDLENBQTRDRyxJQUFJLElBQUlBLElBQUksQ0FBQ0YsSUFBekQsQ0FBaEI7QUFDQSxXQUFPSCxHQUFQO0FBQ0Q7O0FBSlE7O0FBTWQsTUFBTU0sT0FBTixDQUFjO0FBQ1YsZUFBYVAsR0FBYixHQUFtQjtBQUNoQixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsNEJBQVYsRUFBd0NDLElBQXhDLENBQTZDRyxJQUFJLElBQUlBLElBQUksQ0FBQ0YsSUFBMUQsQ0FBaEI7QUFDQSxXQUFPSCxHQUFQO0FBQ0Q7O0FBSlE7O0FBU2RPLElBQUksQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ2hDLFFBQU1DLFFBQVEsR0FBRyxDQUFDO0FBQ2QsbUJBQWUsZUFERDtBQUVkLFlBQVEsZUFGTTtBQUdkLGFBQVMsR0FISztBQUlkLGtCQUFjO0FBSkEsR0FBRCxDQUFqQjtBQU9BLFFBQU1ILElBQUksR0FBRztBQUFFRixJQUFBQSxJQUFJLEVBQUdLO0FBQVQsR0FBYjtBQUNBWixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVVEsaUJBQVYsQ0FBNEJKLElBQTVCLEVBVGdDLENBVWpDOztBQUVDLFNBQU9QLFFBQVEsQ0FBQ0MsR0FBVCxHQUFlRyxJQUFmLENBQW9CQyxJQUFJLElBQUlPLE1BQU0sQ0FBQ1AsSUFBRCxDQUFOLENBQWFRLE9BQWIsQ0FBcUJILFFBQXJCLENBQTVCLENBQVA7QUFFSCxDQWRHLENBQUo7QUFnQkFELElBQUksQ0FBQyxzQkFBRCxFQUF5QixNQUFNO0FBRS9CLFFBQU1LLE9BQU8sR0FBRyxDQUFFO0FBQ2QsbUJBQWUseUJBREQ7QUFFZCxvQkFBZ0IsaUJBRkY7QUFHZCxhQUFTLElBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUYsQ0FBaEI7QUFPQSxRQUFNUCxJQUFJLEdBQUc7QUFBRUYsSUFBQUEsSUFBSSxFQUFHUztBQUFULEdBQWI7QUFFQWhCLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVUSxpQkFBVixDQUE0QkosSUFBNUI7QUFFQUQsRUFBQUEsT0FBTyxDQUFDTCxHQUFSLEdBQWNHLElBQWQsQ0FBbUJHLElBQUksSUFBSUssTUFBTSxDQUFDTCxJQUFJLENBQUNGLElBQU4sQ0FBTixDQUFrQlEsT0FBbEIsQ0FBMEJDLE9BQTFCLENBQTNCO0FBQ0gsQ0FkRyxDQUFKO0FBZ0JBTCxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUMvQixRQUFNTSxPQUFPLEdBQUcsQ0FBQztBQUNiLG1CQUFjLGVBREQ7QUFFYixrQkFBYSxlQUZBO0FBR2Isc0JBQWlCLGlCQUhKO0FBSWIsYUFBUTtBQUpLLEdBQUQsQ0FBaEI7QUFPQSxRQUFNUixJQUFJLEdBQUc7QUFBRUYsSUFBQUEsSUFBSSxFQUFHVTtBQUFULEdBQWI7QUFFQWpCLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVUSxpQkFBVixDQUE0QkosSUFBNUI7QUFFQUMsRUFBQUEsT0FBTyxDQUFDUCxHQUFSLEdBQWNHLElBQWQsQ0FBbUJHLElBQUksSUFBSUssTUFBTSxDQUFDTCxJQUFJLENBQUNGLElBQU4sQ0FBTixDQUFrQlEsT0FBbEIsQ0FBMEJFLE9BQTFCLENBQTNCO0FBRUgsQ0FkRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jbGFzcyBTdHVkZW50cyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zdHVkZW50cy1zY29yZXMuanNvbicpLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5jbGFzcyBDbGFzc2VzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvY2xhc3Mtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc2Nob29sLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5qZXN0Lm1vY2soJ2F4aW9zJyk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBTdHVkZW50cycsICgpID0+IHtcbiAgICBjb25zdCBzdHVkZW50cyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImFseWNlIGZpc2NoZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5OTUsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAzXG4gICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc3R1ZGVudHMgfTtcbiAgICBheGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUocmVzcCk7XG4gICAvLyBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgICByZXR1cm4gU3R1ZGVudHMuYWxsKCkudGhlbihkYXRhID0+IGV4cGVjdChkYXRhKS50b0VxdWFsKHN0dWRlbnRzKSk7XG5cbn0pO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggQ2xhc3NlcycsICgpID0+IHtcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBbIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkZvcnQgU3RyZWV0IEhpZ2ggU2Nob29sXCIsXG4gICAgICAgIFwidGVhY2hlcl9uYW1lXCI6IFwiQ29ubmllIE1ja25pZ2h0XCIsXG4gICAgICAgIFwic2NvcmVcIjogODU2NixcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDFcbiAgICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IGNsYXNzZXMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZShyZXNwKTtcblxuICAgIENsYXNzZXMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwLmRhdGEpLnRvRXF1YWwoY2xhc3NlcykpO1xufSk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBTY2hvb2xzJywgKCkgPT4ge1xuICAgIGNvbnN0IHNjaG9vbHMgPSBbe1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6XCJCcnNpYmFuZSBIaWdoXCIsXG4gICAgICAgIFwiYWRtaW5fbmFtZVwiOlwiQnJhbmRpZSBNY2dlZVwiLFxuICAgICAgICBcInNjaG9vbF9hZGRyZXNzXCI6XCJHb2xkIENvYXN0LCBRTERcIixcbiAgICAgICAgXCJzY29yZVwiOjk1NjA4XG4gICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IHNjaG9vbHMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZShyZXNwKTtcblxuICAgIFNjaG9vbHMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwLmRhdGEpLnRvRXF1YWwoc2Nob29scykpO1xuICAgIFxufSk7XG4iXX0=