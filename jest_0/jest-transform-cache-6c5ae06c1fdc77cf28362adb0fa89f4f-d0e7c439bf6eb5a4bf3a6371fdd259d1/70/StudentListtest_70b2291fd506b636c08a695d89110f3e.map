{"version":3,"sources":["StudentList.test.js"],"names":["jest","mock","axios","getData","test","students","resp","data","get","mockResolvedValue","all","then","expect","toEqual"],"mappings":"AAGAA,IAAI,CAACC,IAAL,CAAU,OAAV;AAHA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAIAC,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAChC,QAAMC,QAAQ,GAAG,CAAC;AACd,mBAAe,eADD;AAEd,YAAQ,eAFM;AAGd,aAAS,GAHK;AAId,kBAAc;AAJA,GAAD,CAAjB;AAOA,QAAMC,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAGF;AAAT,GAAb;AACAH,EAAAA,KAAK,CAACM,GAAN,CAAUC,iBAAV,CAA4BH,IAA5B;AAEA,SAAOH,OAAO,CAACO,GAAR,GAAcC,IAAd,CAAmBJ,IAAI,IAAIK,MAAM,CAACL,IAAD,CAAN,CAAaM,OAAb,CAAqBR,QAArB,CAA3B,CAAP;AACH,CAZG,CAAJ","sourcesContent":["import axios from 'axios';\nimport getData from '../Services/service';\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 1\n    }];\n\n    const resp = { data : students };\n    axios.get.mockResolvedValue(resp);\n\n    return getData.all().then(data => expect(data).toEqual(students));\n});"]}