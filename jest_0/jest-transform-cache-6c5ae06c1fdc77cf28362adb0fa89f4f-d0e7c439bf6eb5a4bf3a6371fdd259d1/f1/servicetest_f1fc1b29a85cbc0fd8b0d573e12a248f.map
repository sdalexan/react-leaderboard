{"version":3,"sources":["service.test.js"],"names":["jest","mock","axios","require","Students","all","get","then","res","data","Classes","resp","Schools","test","students","mockImplementation","Promise","resolve","expect","toEqual"],"mappings":"AAsBAA,IAAI,CAACC,IAAL,CAAU,OAAV;;AAtBA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,QAAN,CAAe;AACX,eAAaC,GAAb,GAAmB;AAChB,WAAO,MAAMH,KAAK,CAACI,GAAN,CAAU,+BAAV,EAA2CC,IAA3C,CAAgDC,GAAG,IAAIA,GAAG,CAACC,IAA3D,CAAb;AACD;;AAHS;;AAMf,MAAMC,OAAN,CAAc;AACV,eAAaL,GAAb,GAAmB;AAChB,QAAIG,GAAG,GAAG,MAAMN,KAAK,CAACI,GAAN,CAAU,2BAAV,EAAuCC,IAAvC,CAA4CI,IAAI,IAAIA,IAAI,CAACF,IAAzD,CAAhB;AACA,WAAOD,GAAP;AACD;;AAJQ;;AAMd,MAAMI,OAAN,CAAc;AACV,eAAaP,GAAb,GAAmB;AAChB,QAAIG,GAAG,GAAG,MAAMN,KAAK,CAACI,GAAN,CAAU,4BAAV,EAAwCC,IAAxC,CAA6CI,IAAI,IAAIA,IAAI,CAACF,IAA1D,CAAhB;AACA,WAAOD,GAAP;AACD;;AAJQ;;AAUdK,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAChC,QAAMC,QAAQ,GAAG,CAAC;AACd,mBAAe,eADD;AAEd,YAAQ,eAFM;AAGd,aAAS,GAHK;AAId,kBAAc;AAJA,GAAD,CAAjB;AAOA,QAAMH,IAAI,GAAG;AAAEF,IAAAA,IAAI,EAAGK;AAAT,GAAb;AAEAZ,EAAAA,KAAK,CAACI,GAAN,CAAUS,kBAAV,CAA6B,MAAMC,OAAO,CAACC,OAAR,CAAgBN,IAAhB,CAAnC;AAEA,SAAOP,QAAQ,CAACC,GAAT,GAAeE,IAAf,CAAoBE,IAAI,IAAIS,MAAM,CAACT,IAAD,CAAN,CAAaU,OAAb,CAAqBL,QAArB,CAA5B,CAAP;AACH,CAbG,CAAJ","sourcesContent":["const axios = require('axios');\n\nclass Students {\n    static async all() {\n       return await axios.get('../data/students-scoress.json').then(res => res.data);\n     }\n}\n\nclass Classes {\n    static async all() {\n       let res = await axios.get('../data/class-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\nclass Schools {\n    static async all() {\n       let res = await axios.get('../data/school-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\n\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 3\n    }];\n\n    const resp = { data : students };\n\n    axios.get.mockImplementation(() => Promise.resolve(resp));\n    \n    return Students.all().then(data => expect(data).toEqual(students));\n});\n\n"]}