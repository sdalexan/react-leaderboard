f195a8acfeb60b8f58fce8e921f5ceec
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json');
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json');
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json');
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Students.all().then(resp => expect(resp.data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }, {
    "school_name": "Brsibane High",
    "teacher_name": "Ratliff Wheeler",
    "score": 6880,
    "class_name": 5
  }, {
    "school_name": "Perth Modern School",
    "teacher_name": "Helena Bauer",
    "score": 9137,
    "class_name": 4
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }, {
    "school_names": "state central",
    "admin_name": "Mcintosh Nelson",
    "school_address": "Brsibane, QLD",
    "score": 24623
  }, {
    "school_name": "Gold Coast Primary",
    "admin_name": "Burch Whitfield",
    "school_address": "Gold Coast, QLD",
    "score": 39648
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwiQ2xhc3NlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJyZXNwIiwiZGF0YSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBcUJBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXJCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLGVBQWFDLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDhCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpTOztBQU1mLE1BQU1FLE9BQU4sQ0FBYztBQUNWLGVBQWFILEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDJCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQU1kLE1BQU1HLE9BQU4sQ0FBYztBQUNWLGVBQWFKLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDRCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQVNkSSxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUVoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFFZCxZQUFRLGVBRk07QUFHZCxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsRUFNakI7QUFDSSxtQkFBZSwwQkFEbkI7QUFFSSxZQUFRLFlBRlo7QUFHSSxhQUFTLEdBSGI7QUFJSSxrQkFBYztBQUpsQixHQU5pQixFQVlqQjtBQUNJLG1CQUFlLHlCQURuQjtBQUVJLFlBQVEsZUFGWjtBQUdJLGFBQVMsRUFIYjtBQUlJLGtCQUFjO0FBSmxCLEdBWmlCLENBQWpCO0FBbUJBLFFBQU1DLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdGO0FBQVQsR0FBYjtBQUVBVCxFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVU8sa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCSixJQUFoQixDQUFuQztBQUVBUixFQUFBQSxRQUFRLENBQUNDLEdBQVQsR0FBZVksSUFBZixDQUFvQkwsSUFBSSxJQUFJTSxNQUFNLENBQUNOLElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCTSxPQUFsQixDQUEwQlIsUUFBMUIsQ0FBNUI7QUFDSCxDQTFCRyxDQUFKO0FBNEJBRCxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUUvQixRQUFNVSxPQUFPLEdBQUcsQ0FBRTtBQUNkLG1CQUFlLHlCQUREO0FBRWQsb0JBQWdCLGlCQUZGO0FBR2QsYUFBUyxJQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFGLEVBTWQ7QUFDRSxtQkFBZSxlQURqQjtBQUVFLG9CQUFnQixpQkFGbEI7QUFHRSxhQUFTLElBSFg7QUFJRSxrQkFBYztBQUpoQixHQU5jLEVBWWQ7QUFDRSxtQkFBZSxxQkFEakI7QUFFRSxvQkFBZ0IsY0FGbEI7QUFHRSxhQUFTLElBSFg7QUFJRSxrQkFBYztBQUpoQixHQVpjLENBQWhCO0FBbUJBLFFBQU1SLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdPO0FBQVQsR0FBYjtBQUVBbEIsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVPLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkosSUFBaEIsQ0FBbkM7QUFFQUosRUFBQUEsT0FBTyxDQUFDSCxHQUFSLEdBQWNZLElBQWQsQ0FBbUJMLElBQUksSUFBSU0sTUFBTSxDQUFDTixJQUFJLENBQUNDLElBQU4sQ0FBTixDQUFrQk0sT0FBbEIsQ0FBMEJDLE9BQTFCLENBQTNCO0FBQ0gsQ0ExQkcsQ0FBSjtBQTZCQVYsSUFBSSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFFL0IsUUFBTVcsT0FBTyxHQUFHLENBQUM7QUFDYixtQkFBYyxlQUREO0FBRWIsa0JBQWEsZUFGQTtBQUdiLHNCQUFpQixpQkFISjtBQUliLGFBQVE7QUFKSyxHQUFELEVBTWY7QUFDRyxvQkFBZSxlQURsQjtBQUVHLGtCQUFhLGlCQUZoQjtBQUdHLHNCQUFpQixlQUhwQjtBQUlHLGFBQVE7QUFKWCxHQU5lLEVBWWY7QUFDRyxtQkFBYyxvQkFEakI7QUFFRyxrQkFBYSxpQkFGaEI7QUFHRyxzQkFBaUIsaUJBSHBCO0FBSUcsYUFBUTtBQUpYLEdBWmUsQ0FBaEI7QUFtQkEsUUFBTVQsSUFBSSxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBR1E7QUFBVCxHQUFiO0FBRUFuQixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVU8sa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCSixJQUFoQixDQUFuQztBQUVBSCxFQUFBQSxPQUFPLENBQUNKLEdBQVIsR0FBY1ksSUFBZCxDQUFtQkwsSUFBSSxJQUFJTSxNQUFNLENBQUNOLElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCTSxPQUFsQixDQUEwQkUsT0FBMUIsQ0FBM0I7QUFDSCxDQTFCRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jbGFzcyBTdHVkZW50cyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3N0dWRlbnRzLXNjb3Jlcy5qc29uJyk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuY2xhc3MgQ2xhc3NlcyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL2NsYXNzLXNjb3Jlcy5qc29uJyk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuY2xhc3MgU2Nob29scyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3NjaG9vbC1zY29yZXMuanNvbicpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cblxuamVzdC5tb2NrKCdheGlvcycpO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU3R1ZGVudHMnLCAoKSA9PiB7XG5cbiAgICBjb25zdCBzdHVkZW50cyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImFseWNlIGZpc2NoZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5OTUsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJTeWRuZXkgR2lybHMgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiTGFyYSBXYWxsc1wiLFxuICAgICAgICBcInNjb3JlXCI6IDcwOSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkZvcnQgU3RyZWV0IEhpZ2ggU2Nob29sXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIkplbmlmZXIgTWlsbHNcIixcbiAgICAgICAgXCJzY29yZVwiOiA1NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IFwiUHJlcFwiXG4gICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc3R1ZGVudHMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgIFN0dWRlbnRzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKHN0dWRlbnRzKSk7XG59KTtcblxudGVzdCgnU2hvdWxkIGZldGNoIENsYXNzZXMnLCAoKSA9PiB7XG5cbiAgICBjb25zdCBjbGFzc2VzID0gWyB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJGb3J0IFN0cmVldCBIaWdoIFNjaG9vbFwiLFxuICAgICAgICBcInRlYWNoZXJfbmFtZVwiOiBcIkNvbm5pZSBNY2tuaWdodFwiLFxuICAgICAgICBcInNjb3JlXCI6IDg1NjYsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAxXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiQnJzaWJhbmUgSGlnaFwiLFxuICAgICAgICBcInRlYWNoZXJfbmFtZVwiOiBcIlJhdGxpZmYgV2hlZWxlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDY4ODAsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiA1XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiUGVydGggTW9kZXJuIFNjaG9vbFwiLFxuICAgICAgICBcInRlYWNoZXJfbmFtZVwiOiBcIkhlbGVuYSBCYXVlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDkxMzcsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiA0XG4gICAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBjbGFzc2VzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgICBDbGFzc2VzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKGNsYXNzZXMpKTtcbn0pO1xuXG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBTY2hvb2xzJywgKCkgPT4ge1xuXG4gICAgY29uc3Qgc2Nob29scyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjpcIkJyc2liYW5lIEhpZ2hcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJCcmFuZGllIE1jZ2VlXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkdvbGQgQ29hc3QsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6OTU2MDhcbiAgICAgfSxcbiAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lc1wiOlwic3RhdGUgY2VudHJhbFwiLFxuICAgICAgICBcImFkbWluX25hbWVcIjpcIk1jaW50b3NoIE5lbHNvblwiLFxuICAgICAgICBcInNjaG9vbF9hZGRyZXNzXCI6XCJCcnNpYmFuZSwgUUxEXCIsXG4gICAgICAgIFwic2NvcmVcIjoyNDYyM1xuICAgICB9LFxuICAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjpcIkdvbGQgQ29hc3QgUHJpbWFyeVwiLFxuICAgICAgICBcImFkbWluX25hbWVcIjpcIkJ1cmNoIFdoaXRmaWVsZFwiLFxuICAgICAgICBcInNjaG9vbF9hZGRyZXNzXCI6XCJHb2xkIENvYXN0LCBRTERcIixcbiAgICAgICAgXCJzY29yZVwiOjM5NjQ4XG4gICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IHNjaG9vbHMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgIFNjaG9vbHMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwLmRhdGEpLnRvRXF1YWwoc2Nob29scykpO1xufSk7Il19