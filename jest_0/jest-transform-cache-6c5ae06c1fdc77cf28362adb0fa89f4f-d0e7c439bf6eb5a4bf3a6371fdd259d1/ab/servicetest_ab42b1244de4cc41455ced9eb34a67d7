18bd7617bf10010b14a4e6c61a00a3da
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    return await axios.get('../data/students-scoress.json').then(resp => resp.data);
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }];
  const resp = {
    data: students
  };
  axios.get.mockResolvedValue(resp);
  return Students.all().then(data => expect(data).toEqual(students));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwiZ2V0IiwidGhlbiIsInJlc3AiLCJkYXRhIiwiQ2xhc3NlcyIsInJlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImV4cGVjdCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiJBQXFCQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVjs7QUFyQkEsTUFBTUMsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFFQSxNQUFNQyxRQUFOLENBQWU7QUFDWCxlQUFhQyxHQUFiLEdBQW1CO0FBQ2hCLFdBQU8sTUFBTUgsS0FBSyxDQUFDSSxHQUFOLENBQVUsK0JBQVYsRUFBMkNDLElBQTNDLENBQWdEQyxJQUFJLElBQUlBLElBQUksQ0FBQ0MsSUFBN0QsQ0FBYjtBQUNEOztBQUhTOztBQU1mLE1BQU1DLE9BQU4sQ0FBYztBQUNWLGVBQWFMLEdBQWIsR0FBbUI7QUFDaEIsUUFBSU0sR0FBRyxHQUFHLE1BQU1ULEtBQUssQ0FBQ0ksR0FBTixDQUFVLDJCQUFWLEVBQXVDQyxJQUF2QyxDQUE0Q0MsSUFBSSxJQUFJQSxJQUFJLENBQUNDLElBQXpELENBQWhCO0FBQ0EsV0FBT0UsR0FBUDtBQUNEOztBQUpROztBQU1kLE1BQU1DLE9BQU4sQ0FBYztBQUNWLGVBQWFQLEdBQWIsR0FBbUI7QUFDaEIsUUFBSU0sR0FBRyxHQUFHLE1BQU1ULEtBQUssQ0FBQ0ksR0FBTixDQUFVLDRCQUFWLEVBQXdDQyxJQUF4QyxDQUE2Q0MsSUFBSSxJQUFJQSxJQUFJLENBQUNDLElBQTFELENBQWhCO0FBQ0EsV0FBT0UsR0FBUDtBQUNEOztBQUpROztBQVNkRSxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUNoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFFZCxZQUFRLGVBRk07QUFHZCxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsQ0FBakI7QUFPQSxRQUFNTixJQUFJLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFHSztBQUFULEdBQWI7QUFFQVosRUFBQUEsS0FBSyxDQUFDSSxHQUFOLENBQVVTLGlCQUFWLENBQTRCUCxJQUE1QjtBQUVBLFNBQU9KLFFBQVEsQ0FBQ0MsR0FBVCxHQUFlRSxJQUFmLENBQW9CRSxJQUFJLElBQUlPLE1BQU0sQ0FBQ1AsSUFBRCxDQUFOLENBQWFRLE9BQWIsQ0FBcUJILFFBQXJCLENBQTVCLENBQVA7QUFDSCxDQWJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbmNsYXNzIFN0dWRlbnRzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc3R1ZGVudHMtc2NvcmVzcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgIH1cbn1cblxuY2xhc3MgQ2xhc3NlcyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL2NsYXNzLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuY2xhc3MgU2Nob29scyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3NjaG9vbC1zY29yZXMuanNvbicpLnRoZW4ocmVzcCA9PiByZXNwLmRhdGEpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cblxuamVzdC5tb2NrKCdheGlvcycpO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU3R1ZGVudHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3R1ZGVudHMgPSBbe1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwic3RhdGUgY2VudHJhbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJhbHljZSBmaXNjaGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTk1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMVxuICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IHN0dWRlbnRzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUocmVzcCk7XG5cbiAgICByZXR1cm4gU3R1ZGVudHMuYWxsKCkudGhlbihkYXRhID0+IGV4cGVjdChkYXRhKS50b0VxdWFsKHN0dWRlbnRzKSk7XG59KTtcblxuIl19