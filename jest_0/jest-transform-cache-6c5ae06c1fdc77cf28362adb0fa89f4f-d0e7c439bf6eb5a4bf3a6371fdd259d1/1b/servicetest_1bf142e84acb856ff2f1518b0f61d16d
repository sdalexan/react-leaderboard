2ae43a048c5805583ce46f05a4b274eb
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    return await axios.get('../data/students-scoress.json').then(res => res.data);
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }];
  const resp = {
    data: students
  };
  axios.get.mockResolvedValue(res);
  return Students.all().then(data => expect(data).toEqual(students));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwiZ2V0IiwidGhlbiIsInJlcyIsImRhdGEiLCJDbGFzc2VzIiwicmVzcCIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImV4cGVjdCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiJBQXNCQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVjs7QUF0QkEsTUFBTUMsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFFQSxNQUFNQyxRQUFOLENBQWU7QUFDWCxlQUFhQyxHQUFiLEdBQW1CO0FBQ2hCLFdBQU8sTUFBTUgsS0FBSyxDQUFDSSxHQUFOLENBQVUsK0JBQVYsRUFBMkNDLElBQTNDLENBQWdEQyxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsSUFBM0QsQ0FBYjtBQUNEOztBQUhTOztBQU1mLE1BQU1DLE9BQU4sQ0FBYztBQUNWLGVBQWFMLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUcsR0FBRyxHQUFHLE1BQU1OLEtBQUssQ0FBQ0ksR0FBTixDQUFVLDJCQUFWLEVBQXVDQyxJQUF2QyxDQUE0Q0ksSUFBSSxJQUFJQSxJQUFJLENBQUNGLElBQXpELENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQU1kLE1BQU1JLE9BQU4sQ0FBYztBQUNWLGVBQWFQLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUcsR0FBRyxHQUFHLE1BQU1OLEtBQUssQ0FBQ0ksR0FBTixDQUFVLDRCQUFWLEVBQXdDQyxJQUF4QyxDQUE2Q0ksSUFBSSxJQUFJQSxJQUFJLENBQUNGLElBQTFELENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQVVkSyxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUNoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFFZCxZQUFRLGVBRk07QUFHZCxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsQ0FBakI7QUFPQSxRQUFNSCxJQUFJLEdBQUc7QUFBRUYsSUFBQUEsSUFBSSxFQUFHSztBQUFULEdBQWI7QUFFQVosRUFBQUEsS0FBSyxDQUFDSSxHQUFOLENBQVVTLGlCQUFWLENBQTRCUCxHQUE1QjtBQUVBLFNBQU9KLFFBQVEsQ0FBQ0MsR0FBVCxHQUFlRSxJQUFmLENBQW9CRSxJQUFJLElBQUlPLE1BQU0sQ0FBQ1AsSUFBRCxDQUFOLENBQWFRLE9BQWIsQ0FBcUJILFFBQXJCLENBQTVCLENBQVA7QUFDSCxDQWJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbmNsYXNzIFN0dWRlbnRzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIHJldHVybiBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc3R1ZGVudHMtc2NvcmVzcy5qc29uJykudGhlbihyZXMgPT4gcmVzLmRhdGEpO1xuICAgICB9XG59XG5cbmNsYXNzIENsYXNzZXMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9jbGFzcy1zY29yZXMuanNvbicpLnRoZW4ocmVzcCA9PiByZXNwLmRhdGEpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cbmNsYXNzIFNjaG9vbHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zY2hvb2wtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5cblxuamVzdC5tb2NrKCdheGlvcycpO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU3R1ZGVudHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3R1ZGVudHMgPSBbe1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwic3RhdGUgY2VudHJhbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJhbHljZSBmaXNjaGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTk1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMVxuICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IHN0dWRlbnRzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUocmVzKTtcblxuICAgIHJldHVybiBTdHVkZW50cy5hbGwoKS50aGVuKGRhdGEgPT4gZXhwZWN0KGRhdGEpLnRvRXF1YWwoc3R1ZGVudHMpKTtcbn0pO1xuXG4iXX0=