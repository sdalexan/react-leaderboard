c9c7e649e9c1744e7133eac6ec6314a1
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let resS = await axios.get('../data/students-scores.json');
    return resS;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json');
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json');
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    // "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    //"score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    //ifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Students.all().then(resp => expect(resp.data).toEqual(resS));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }, {
    "school_name": "Brsibane High",
    "teacher_name": "Ratliff Wheeler",
    "score": 6880,
    "class_name": 5
  }, {
    "school_name": "Perth Modern School",
    "teacher_name": "Helena Bauer",
    "score": 9137,
    "class_name": 4
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }, {
    "school_name": "state central",
    "admin_name": "Mcintosh Nelson",
    "school_address": "Brsibane, QLD",
    "score": 24623
  }, {
    "school_name": "Gold Coast Primary",
    "admin_name": "Burch Whitfield",
    "school_address": "Gold Coast, QLD",
    "score": 39648
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzUyIsImdldCIsIkNsYXNzZXMiLCJyZXMiLCJTY2hvb2xzIiwidGVzdCIsInN0dWRlbnRzIiwicmVzcCIsImRhdGEiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsInRoZW4iLCJleHBlY3QiLCJ0b0VxdWFsIiwiY2xhc3NlcyIsInNjaG9vbHMiXSwibWFwcGluZ3MiOiJBQXNCQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVjs7QUF0QkEsTUFBTUMsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFFQSxNQUFNQyxRQUFOLENBQWU7QUFDWCxlQUFhQyxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLElBQUksR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSw4QkFBVixDQUFqQjtBQUNBLFdBQU9ELElBQVA7QUFDRDs7QUFKUzs7QUFPZixNQUFNRSxPQUFOLENBQWM7QUFDVixlQUFhSCxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlJLEdBQUcsR0FBRyxNQUFNUCxLQUFLLENBQUNLLEdBQU4sQ0FBVSwyQkFBVixDQUFoQjtBQUNBLFdBQU9FLEdBQVA7QUFDRDs7QUFKUTs7QUFNZCxNQUFNQyxPQUFOLENBQWM7QUFDVixlQUFhTCxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlJLEdBQUcsR0FBRyxNQUFNUCxLQUFLLENBQUNLLEdBQU4sQ0FBVSw0QkFBVixDQUFoQjtBQUNBLFdBQU9FLEdBQVA7QUFDRDs7QUFKUTs7QUFTZEUsSUFBSSxDQUFDLHVCQUFELEVBQTBCLE1BQU07QUFDaEMsUUFBTUMsUUFBUSxHQUFHLENBQUM7QUFDZCxtQkFBZSxlQUREO0FBRWY7QUFDQyxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsRUFNakI7QUFDSSxtQkFBZSwwQkFEbkI7QUFFSSxZQUFRLFlBRlo7QUFHSTtBQUNBLGtCQUFjO0FBSmxCLEdBTmlCLEVBWWpCO0FBQ0ksbUJBQWUseUJBRG5CO0FBRUk7QUFDQSxhQUFTLEVBSGI7QUFJSSxrQkFBYztBQUpsQixHQVppQixDQUFqQjtBQW1CQSxRQUFNQyxJQUFJLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFHRjtBQUFULEdBQWI7QUFFQVYsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVRLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkosSUFBaEIsQ0FBbkM7QUFFQVQsRUFBQUEsUUFBUSxDQUFDQyxHQUFULEdBQWVhLElBQWYsQ0FBb0JMLElBQUksSUFBSU0sTUFBTSxDQUFDTixJQUFJLENBQUNDLElBQU4sQ0FBTixDQUFrQk0sT0FBbEIsQ0FBMEJkLElBQTFCLENBQTVCO0FBRUgsQ0ExQkcsQ0FBSjtBQTRCQUssSUFBSSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFFL0IsUUFBTVUsT0FBTyxHQUFHLENBQUU7QUFDZCxtQkFBZSx5QkFERDtBQUVkLG9CQUFnQixpQkFGRjtBQUdkLGFBQVMsSUFISztBQUlkLGtCQUFjO0FBSkEsR0FBRixFQU1kO0FBQ0UsbUJBQWUsZUFEakI7QUFFRSxvQkFBZ0IsaUJBRmxCO0FBR0UsYUFBUyxJQUhYO0FBSUUsa0JBQWM7QUFKaEIsR0FOYyxFQVlkO0FBQ0UsbUJBQWUscUJBRGpCO0FBRUUsb0JBQWdCLGNBRmxCO0FBR0UsYUFBUyxJQUhYO0FBSUUsa0JBQWM7QUFKaEIsR0FaYyxDQUFoQjtBQW1CQSxRQUFNUixJQUFJLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFHTztBQUFULEdBQWI7QUFFQW5CLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVUSxrQkFBVixDQUE2QixNQUFNQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JKLElBQWhCLENBQW5DO0FBRUFMLEVBQUFBLE9BQU8sQ0FBQ0gsR0FBUixHQUFjYSxJQUFkLENBQW1CTCxJQUFJLElBQUlNLE1BQU0sQ0FBQ04sSUFBSSxDQUFDQyxJQUFOLENBQU4sQ0FBa0JNLE9BQWxCLENBQTBCQyxPQUExQixDQUEzQjtBQUNILENBMUJHLENBQUo7QUE2QkFWLElBQUksQ0FBQyxzQkFBRCxFQUF5QixNQUFNO0FBQy9CLFFBQU1XLE9BQU8sR0FBRyxDQUFDO0FBQ2IsbUJBQWMsZUFERDtBQUViLGtCQUFhLGVBRkE7QUFHYixzQkFBaUIsaUJBSEo7QUFJYixhQUFRO0FBSkssR0FBRCxFQU1mO0FBQ0csbUJBQWMsZUFEakI7QUFFRyxrQkFBYSxpQkFGaEI7QUFHRyxzQkFBaUIsZUFIcEI7QUFJRyxhQUFRO0FBSlgsR0FOZSxFQVlmO0FBQ0csbUJBQWMsb0JBRGpCO0FBRUcsa0JBQWEsaUJBRmhCO0FBR0csc0JBQWlCLGlCQUhwQjtBQUlHLGFBQVE7QUFKWCxHQVplLENBQWhCO0FBbUJBLFFBQU1ULElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdRO0FBQVQsR0FBYjtBQUVBcEIsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVRLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkosSUFBaEIsQ0FBbkM7QUFFQUgsRUFBQUEsT0FBTyxDQUFDTCxHQUFSLEdBQWNhLElBQWQsQ0FBbUJMLElBQUksSUFBSU0sTUFBTSxDQUFDTixJQUFJLENBQUNDLElBQU4sQ0FBTixDQUFrQk0sT0FBbEIsQ0FBMEJFLE9BQTFCLENBQTNCO0FBRUgsQ0ExQkcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuY2xhc3MgU3R1ZGVudHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlc1MgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc3R1ZGVudHMtc2NvcmVzLmpzb24nKTtcbiAgICAgICByZXR1cm4gcmVzUztcbiAgICAgfVxufVxuXG5jbGFzcyBDbGFzc2VzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvY2xhc3Mtc2NvcmVzLmpzb24nKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc2Nob29sLXNjb3Jlcy5qc29uJyk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5qZXN0Lm1vY2soJ2F4aW9zJyk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBTdHVkZW50cycsICgpID0+IHtcbiAgICBjb25zdCBzdHVkZW50cyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgLy8gXCJuYW1lXCI6IFwiYWx5Y2UgZmlzY2hlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDk5NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIlN5ZG5leSBHaXJscyBIaWdoIFNjaG9vbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJMYXJhIFdhbGxzXCIsXG4gICAgICAgIC8vXCJzY29yZVwiOiA3MDksXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiA0XG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJGb3J0IFN0cmVldCBIaWdoIFNjaG9vbFwiLFxuICAgICAgICAvL2lmZXIgTWlsbHNcIixcbiAgICAgICAgXCJzY29yZVwiOiA1NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IFwiUHJlcFwiXG4gICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc3R1ZGVudHMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgIFN0dWRlbnRzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKHJlc1MpKTtcbiAgICBcbn0pO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggQ2xhc3NlcycsICgpID0+IHtcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBbIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkZvcnQgU3RyZWV0IEhpZ2ggU2Nob29sXCIsXG4gICAgICAgIFwidGVhY2hlcl9uYW1lXCI6IFwiQ29ubmllIE1ja25pZ2h0XCIsXG4gICAgICAgIFwic2NvcmVcIjogODU2NixcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDFcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJCcnNpYmFuZSBIaWdoXCIsXG4gICAgICAgIFwidGVhY2hlcl9uYW1lXCI6IFwiUmF0bGlmZiBXaGVlbGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogNjg4MCxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJQZXJ0aCBNb2Rlcm4gU2Nob29sXCIsXG4gICAgICAgIFwidGVhY2hlcl9uYW1lXCI6IFwiSGVsZW5hIEJhdWVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTEzNyxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDRcbiAgICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IGNsYXNzZXMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgIENsYXNzZXMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwLmRhdGEpLnRvRXF1YWwoY2xhc3NlcykpO1xufSk7XG5cblxudGVzdCgnU2hvdWxkIGZldGNoIFNjaG9vbHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc2Nob29scyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjpcIkJyc2liYW5lIEhpZ2hcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJCcmFuZGllIE1jZ2VlXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkdvbGQgQ29hc3QsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6OTU2MDhcbiAgICAgfSxcbiAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6XCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwiYWRtaW5fbmFtZVwiOlwiTWNpbnRvc2ggTmVsc29uXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkJyc2liYW5lLCBRTERcIixcbiAgICAgICAgXCJzY29yZVwiOjI0NjIzXG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOlwiR29sZCBDb2FzdCBQcmltYXJ5XCIsXG4gICAgICAgIFwiYWRtaW5fbmFtZVwiOlwiQnVyY2ggV2hpdGZpZWxkXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkdvbGQgQ29hc3QsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6Mzk2NDhcbiAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc2Nob29scyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgU2Nob29scy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChzY2hvb2xzKSk7XG4gICAgXG59KTtcblxuIl19