{"version":3,"sources":["service.test.js"],"names":["jest","mock","axios","require","Students","all","res","get","then","data","Classes","resC","respC","Schools","resS","respS","test","students","resp","mockImplementation","Promise","resolve","expect","toEqual","classes","schools"],"mappings":"AAuBAA,IAAI,CAACC,IAAL,CAAU,OAAV;;AAvBA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,QAAN,CAAe;AACX,eAAaC,GAAb,GAAmB;AACf,QAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,8BAAV,EAA0CC,IAA1C,CAA+CF,GAAG,IAAIA,GAAG,CAACG,IAA1D,CAAhB;AACA,WAAOH,GAAP;AACF;;AAJS;;AAOf,MAAMI,OAAN,CAAc;AACV,eAAaL,GAAb,GAAmB;AAChB,QAAIM,IAAI,GAAG,MAAMT,KAAK,CAACK,GAAN,CAAU,2BAAV,EAAuCC,IAAvC,CAA4CI,KAAK,IAAIA,KAAK,CAACH,IAA3D,CAAjB;AACA,WAAOE,IAAP;AACD;;AAJQ;;AAOd,MAAME,OAAN,CAAc;AACV,eAAaR,GAAb,GAAmB;AAChB,QAAIS,IAAI,GAAG,MAAMZ,KAAK,CAACK,GAAN,CAAU,4BAAV,EAAwCC,IAAxC,CAA6CO,KAAK,IAAIA,KAAK,CAACN,IAA5D,CAAjB;AACA,WAAOK,IAAP;AACD;;AAJQ;;AASdE,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAChC,QAAMC,QAAQ,GAAG,CAAC;AACd,mBAAe,eADD;AAEd,YAAQ,eAFM;AAGd,aAAS,GAHK;AAId,kBAAc;AAJA,GAAD,CAAjB;AAOA,QAAMC,IAAI,GAAG;AAAET,IAAAA,IAAI,EAAGQ;AAAT,GAAb;AAEAf,EAAAA,KAAK,CAACK,GAAN,CAAUY,kBAAV,CAA6B,MAAMC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAnC;AAEA,SAAOd,QAAQ,CAACC,GAAT,GAAeG,IAAf,CAAoBC,IAAI,IAAIa,MAAM,CAACb,IAAD,CAAN,CAAac,OAAb,CAAqBN,QAArB,CAA5B,CAAP;AAEH,CAdG,CAAJ;AAgBAD,IAAI,CAAC,sBAAD,EAAyB,MAAM;AAE/B,QAAMQ,OAAO,GAAG,CAAE;AACd,mBAAe,yBADD;AAEd,oBAAgB,iBAFF;AAGd,aAAS,IAHK;AAId,kBAAc;AAJA,GAAF,CAAhB;AAOA,QAAMZ,KAAK,GAAG;AAAEH,IAAAA,IAAI,EAAGe;AAAT,GAAd;AAEAtB,EAAAA,KAAK,CAACK,GAAN,CAAUY,kBAAV,CAA6B,MAAMC,OAAO,CAACC,OAAR,CAAgBT,KAAhB,CAAnC;AAEAF,EAAAA,OAAO,CAACL,GAAR,GAAcG,IAAd,CAAmBU,IAAI,IAAII,MAAM,CAACV,KAAK,CAACH,IAAP,CAAN,CAAmBc,OAAnB,CAA2BC,OAA3B,CAA3B;AACH,CAdG,CAAJ;AAgBAR,IAAI,CAAC,sBAAD,EAAyB,MAAM;AAC/B,QAAMS,OAAO,GAAG,CAAC;AACb,mBAAc,eADD;AAEb,kBAAa,eAFA;AAGb,sBAAiB,iBAHJ;AAIb,aAAQ;AAJK,GAAD,CAAhB;AAOA,QAAMV,KAAK,GAAG;AAAEN,IAAAA,IAAI,EAAGgB;AAAT,GAAd;AAEAvB,EAAAA,KAAK,CAACK,GAAN,CAAUY,kBAAV,CAA6B,MAAMC,OAAO,CAACC,OAAR,CAAgBN,KAAhB,CAAnC;AAEAF,EAAAA,OAAO,CAACR,GAAR,GAAcG,IAAd,CAAmBU,IAAI,IAAII,MAAM,CAACP,KAAK,CAACN,IAAP,CAAN,CAAmBc,OAAnB,CAA2BE,OAA3B,CAA3B;AAEH,CAdG,CAAJ","sourcesContent":["const axios = require('axios');\n\nclass Students {\n    static async all() {\n        let res = await axios.get('../data/students-scores.json').then(res => res.data);\n        return res;\n     }\n}\n\nclass Classes {\n    static async all() {\n       let resC = await axios.get('../data/class-scores.json').then(respC => respC.data);\n       return resC;\n     }\n}\n\nclass Schools {\n    static async all() {\n       let resS = await axios.get('../data/school-scores.json').then(respS => respS.data);\n       return resS;\n     }\n}\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 3\n    }];\n\n    const resp = { data : students };\n \n    axios.get.mockImplementation(() => Promise.resolve(resp));\n\n    return Students.all().then(data => expect(data).toEqual(students));\n\n});\n\ntest('Should fetch Classes', () => {\n\n    const classes = [ {\n        \"school_name\": \"Fort Street High School\",\n        \"teacher_name\": \"Connie Mcknight\",\n        \"score\": 8566,\n        \"class_name\": 1\n      }];\n\n    const respC = { data : classes };\n\n    axios.get.mockImplementation(() => Promise.resolve(respC));\n\n    Classes.all().then(resp => expect(respC.data).toEqual(classes));\n});\n\ntest('Should fetch Schools', () => {\n    const schools = [{\n        \"school_name\":\"Brsibane High\",\n        \"admin_name\":\"Brandie Mcgee\",\n        \"school_address\":\"Gold Coast, QLD\",\n        \"score\":95608\n     }];\n\n    const respS = { data : schools };\n\n    axios.get.mockImplementation(() => Promise.resolve(respS));\n\n    Schools.all().then(resp => expect(respS.data).toEqual(schools));\n    \n});\n"]}