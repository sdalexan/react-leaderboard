ec8e79b2172c0abbcdacbe6165dc3446
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json').then(res => res.data);
    return res;
  }

}

class Classes {
  static async all() {
    let resC = await axios.get('../data/class-scores.json').then(respC => respC.data);
    return resC;
  }

}

class Schools {
  static async all() {
    let resS = await axios.get('../data/school-scores.json').then(respS => respS.data);
    return resS;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 3
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  return Students.all().then(data => expect(data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }];
  const respC = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(respC));
  Classes.all().then(resp => expect(respC.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }];
  const respS = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(respS));
  Schools.all().then(resp => expect(respS.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsImRhdGEiLCJDbGFzc2VzIiwicmVzQyIsInJlc3BDIiwiU2Nob29scyIsInJlc1MiLCJyZXNwUyIsInRlc3QiLCJzdHVkZW50cyIsInJlc3AiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBdUJBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXZCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLGVBQWFDLEdBQWIsR0FBbUI7QUFDZixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsOEJBQVYsRUFBMENDLElBQTFDLENBQStDRixHQUFHLElBQUlBLEdBQUcsQ0FBQ0csSUFBMUQsQ0FBaEI7QUFDQSxXQUFPSCxHQUFQO0FBQ0Y7O0FBSlM7O0FBT2YsTUFBTUksT0FBTixDQUFjO0FBQ1YsZUFBYUwsR0FBYixHQUFtQjtBQUNoQixRQUFJTSxJQUFJLEdBQUcsTUFBTVQsS0FBSyxDQUFDSyxHQUFOLENBQVUsMkJBQVYsRUFBdUNDLElBQXZDLENBQTRDSSxLQUFLLElBQUlBLEtBQUssQ0FBQ0gsSUFBM0QsQ0FBakI7QUFDQSxXQUFPRSxJQUFQO0FBQ0Q7O0FBSlE7O0FBT2QsTUFBTUUsT0FBTixDQUFjO0FBQ1YsZUFBYVIsR0FBYixHQUFtQjtBQUNoQixRQUFJUyxJQUFJLEdBQUcsTUFBTVosS0FBSyxDQUFDSyxHQUFOLENBQVUsNEJBQVYsRUFBd0NDLElBQXhDLENBQTZDTyxLQUFLLElBQUlBLEtBQUssQ0FBQ04sSUFBNUQsQ0FBakI7QUFDQSxXQUFPSyxJQUFQO0FBQ0Q7O0FBSlE7O0FBU2RFLElBQUksQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ2hDLFFBQU1DLFFBQVEsR0FBRyxDQUFDO0FBQ2QsbUJBQWUsZUFERDtBQUVkLFlBQVEsZUFGTTtBQUdkLGFBQVMsR0FISztBQUlkLGtCQUFjO0FBSkEsR0FBRCxDQUFqQjtBQU9BLFFBQU1DLElBQUksR0FBRztBQUFFVCxJQUFBQSxJQUFJLEVBQUdRO0FBQVQsR0FBYjtBQUVBZixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVVksa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCSCxJQUFoQixDQUFuQztBQUVBLFNBQU9kLFFBQVEsQ0FBQ0MsR0FBVCxHQUFlRyxJQUFmLENBQW9CQyxJQUFJLElBQUlhLE1BQU0sQ0FBQ2IsSUFBRCxDQUFOLENBQWFjLE9BQWIsQ0FBcUJOLFFBQXJCLENBQTVCLENBQVA7QUFFSCxDQWRHLENBQUo7QUFnQkFELElBQUksQ0FBQyxzQkFBRCxFQUF5QixNQUFNO0FBRS9CLFFBQU1RLE9BQU8sR0FBRyxDQUFFO0FBQ2QsbUJBQWUseUJBREQ7QUFFZCxvQkFBZ0IsaUJBRkY7QUFHZCxhQUFTLElBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUYsQ0FBaEI7QUFPQSxRQUFNWixLQUFLLEdBQUc7QUFBRUgsSUFBQUEsSUFBSSxFQUFHZTtBQUFULEdBQWQ7QUFFQXRCLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVWSxrQkFBVixDQUE2QixNQUFNQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JULEtBQWhCLENBQW5DO0FBRUFGLEVBQUFBLE9BQU8sQ0FBQ0wsR0FBUixHQUFjRyxJQUFkLENBQW1CVSxJQUFJLElBQUlJLE1BQU0sQ0FBQ1YsS0FBSyxDQUFDSCxJQUFQLENBQU4sQ0FBbUJjLE9BQW5CLENBQTJCQyxPQUEzQixDQUEzQjtBQUNILENBZEcsQ0FBSjtBQWdCQVIsSUFBSSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFDL0IsUUFBTVMsT0FBTyxHQUFHLENBQUM7QUFDYixtQkFBYyxlQUREO0FBRWIsa0JBQWEsZUFGQTtBQUdiLHNCQUFpQixpQkFISjtBQUliLGFBQVE7QUFKSyxHQUFELENBQWhCO0FBT0EsUUFBTVYsS0FBSyxHQUFHO0FBQUVOLElBQUFBLElBQUksRUFBR2dCO0FBQVQsR0FBZDtBQUVBdkIsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVZLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQk4sS0FBaEIsQ0FBbkM7QUFFQUYsRUFBQUEsT0FBTyxDQUFDUixHQUFSLEdBQWNHLElBQWQsQ0FBbUJVLElBQUksSUFBSUksTUFBTSxDQUFDUCxLQUFLLENBQUNOLElBQVAsQ0FBTixDQUFtQmMsT0FBbkIsQ0FBMkJFLE9BQTNCLENBQTNCO0FBRUgsQ0FkRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jbGFzcyBTdHVkZW50cyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zdHVkZW50cy1zY29yZXMuanNvbicpLnRoZW4ocmVzID0+IHJlcy5kYXRhKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5jbGFzcyBDbGFzc2VzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXNDID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL2NsYXNzLXNjb3Jlcy5qc29uJykudGhlbihyZXNwQyA9PiByZXNwQy5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzQztcbiAgICAgfVxufVxuXG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXNTID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3NjaG9vbC1zY29yZXMuanNvbicpLnRoZW4ocmVzcFMgPT4gcmVzcFMuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlc1M7XG4gICAgIH1cbn1cblxuamVzdC5tb2NrKCdheGlvcycpO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU3R1ZGVudHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3R1ZGVudHMgPSBbe1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwic3RhdGUgY2VudHJhbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJhbHljZSBmaXNjaGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTk1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogM1xuICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IHN0dWRlbnRzIH07XG4gXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgcmV0dXJuIFN0dWRlbnRzLmFsbCgpLnRoZW4oZGF0YSA9PiBleHBlY3QoZGF0YSkudG9FcXVhbChzdHVkZW50cykpO1xuXG59KTtcblxudGVzdCgnU2hvdWxkIGZldGNoIENsYXNzZXMnLCAoKSA9PiB7XG5cbiAgICBjb25zdCBjbGFzc2VzID0gWyB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJGb3J0IFN0cmVldCBIaWdoIFNjaG9vbFwiLFxuICAgICAgICBcInRlYWNoZXJfbmFtZVwiOiBcIkNvbm5pZSBNY2tuaWdodFwiLFxuICAgICAgICBcInNjb3JlXCI6IDg1NjYsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAxXG4gICAgICB9XTtcblxuICAgIGNvbnN0IHJlc3BDID0geyBkYXRhIDogY2xhc3NlcyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcEMpKTtcblxuICAgIENsYXNzZXMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwQy5kYXRhKS50b0VxdWFsKGNsYXNzZXMpKTtcbn0pO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU2Nob29scycsICgpID0+IHtcbiAgICBjb25zdCBzY2hvb2xzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOlwiQnJzaWJhbmUgSGlnaFwiLFxuICAgICAgICBcImFkbWluX25hbWVcIjpcIkJyYW5kaWUgTWNnZWVcIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiR29sZCBDb2FzdCwgUUxEXCIsXG4gICAgICAgIFwic2NvcmVcIjo5NTYwOFxuICAgICB9XTtcblxuICAgIGNvbnN0IHJlc3BTID0geyBkYXRhIDogc2Nob29scyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcFMpKTtcblxuICAgIFNjaG9vbHMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwUy5kYXRhKS50b0VxdWFsKHNjaG9vbHMpKTtcbiAgICBcbn0pO1xuIl19