8c582c5c39740d1ee11c14221cce1838
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json').then(resp => resp.data);
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Students.all().then(resp => expect(resp.data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }, {
    "school_name": "Brsibane High",
    "teacher_name": "Ratliff Wheeler",
    "score": 6880,
    "class_name": 5
  }, {
    "school_name": "Perth Modern School",
    "teacher_name": "Helena Bauer",
    "score": 9137,
    "class_name": 4
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }, {
    "school_name": "state central",
    "admin_name": "Mcintosh Nelson",
    "school_address": "Brsibane, QLD",
    "score": 24623
  }, {
    "school_name": "Gold Coast Primary",
    "admin_name": "Burch Whitfield",
    "school_address": "Gold Coast, QLD",
    "score": 39648
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsInJlc3AiLCJkYXRhIiwiQ2xhc3NlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBc0JBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXRCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLGVBQWFDLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDhCQUFWLEVBQTBDQyxJQUExQyxDQUErQ0MsSUFBSSxJQUFJQSxJQUFJLENBQUNDLElBQTVELENBQWhCO0FBQ0EsV0FBT0osR0FBUDtBQUNEOztBQUpTOztBQU9mLE1BQU1LLE9BQU4sQ0FBYztBQUNWLGVBQWFOLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDJCQUFWLEVBQXVDQyxJQUF2QyxDQUE0Q0MsSUFBSSxJQUFJQSxJQUFJLENBQUNDLElBQXpELENBQWhCO0FBQ0EsV0FBT0osR0FBUDtBQUNEOztBQUpROztBQU1kLE1BQU1NLE9BQU4sQ0FBYztBQUNWLGVBQWFQLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDRCQUFWLEVBQXdDQyxJQUF4QyxDQUE2Q0MsSUFBSSxJQUFJQSxJQUFJLENBQUNDLElBQTFELENBQWhCO0FBQ0EsV0FBT0osR0FBUDtBQUNEOztBQUpROztBQVNkTyxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUNoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFHZCxrQkFBYztBQUhBLEdBQUQsRUFLakI7QUFDSSxtQkFBZSwwQkFEbkI7QUFFSSxZQUFRLFlBRlo7QUFHSSxhQUFTLEdBSGI7QUFJSSxrQkFBYztBQUpsQixHQUxpQixFQVdqQjtBQUNJLG1CQUFlLHlCQURuQjtBQUVJLFlBQVEsZUFGWjtBQUdJLGFBQVMsRUFIYjtBQUlJLGtCQUFjO0FBSmxCLEdBWGlCLENBQWpCO0FBa0JBLFFBQU1MLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdJO0FBQVQsR0FBYjtBQUVBWixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVVEsa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCUixJQUFoQixDQUFuQztBQUVBTCxFQUFBQSxRQUFRLENBQUNDLEdBQVQsR0FBZUcsSUFBZixDQUFvQkMsSUFBSSxJQUFJUyxNQUFNLENBQUNULElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCUyxPQUFsQixDQUEwQkwsUUFBMUIsQ0FBNUI7QUFFSCxDQXpCRyxDQUFKO0FBMkJBRCxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUUvQixRQUFNTyxPQUFPLEdBQUcsQ0FBRTtBQUNkLG1CQUFlLHlCQUREO0FBRWQsb0JBQWdCLGlCQUZGO0FBR2QsYUFBUyxJQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFGLEVBTWQ7QUFDRSxtQkFBZSxlQURqQjtBQUVFLG9CQUFnQixpQkFGbEI7QUFHRSxhQUFTLElBSFg7QUFJRSxrQkFBYztBQUpoQixHQU5jLEVBWWQ7QUFDRSxtQkFBZSxxQkFEakI7QUFFRSxvQkFBZ0IsY0FGbEI7QUFHRSxhQUFTLElBSFg7QUFJRSxrQkFBYztBQUpoQixHQVpjLENBQWhCO0FBbUJBLFFBQU1YLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdVO0FBQVQsR0FBYjtBQUVBbEIsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVRLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQlIsSUFBaEIsQ0FBbkM7QUFFQUUsRUFBQUEsT0FBTyxDQUFDTixHQUFSLEdBQWNHLElBQWQsQ0FBbUJDLElBQUksSUFBSVMsTUFBTSxDQUFDVCxJQUFJLENBQUNDLElBQU4sQ0FBTixDQUFrQlMsT0FBbEIsQ0FBMEJDLE9BQTFCLENBQTNCO0FBQ0gsQ0ExQkcsQ0FBSjtBQTZCQVAsSUFBSSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFDL0IsUUFBTVEsT0FBTyxHQUFHLENBQUM7QUFDYixtQkFBYyxlQUREO0FBRWIsa0JBQWEsZUFGQTtBQUdiLHNCQUFpQixpQkFISjtBQUliLGFBQVE7QUFKSyxHQUFELEVBTWY7QUFDRyxtQkFBYyxlQURqQjtBQUVHLGtCQUFhLGlCQUZoQjtBQUdHLHNCQUFpQixlQUhwQjtBQUlHLGFBQVE7QUFKWCxHQU5lLEVBWWY7QUFDRyxtQkFBYyxvQkFEakI7QUFFRyxrQkFBYSxpQkFGaEI7QUFHRyxzQkFBaUIsaUJBSHBCO0FBSUcsYUFBUTtBQUpYLEdBWmUsQ0FBaEI7QUFtQkEsUUFBTVosSUFBSSxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBR1c7QUFBVCxHQUFiO0FBRUFuQixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVVEsa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCUixJQUFoQixDQUFuQztBQUVBRyxFQUFBQSxPQUFPLENBQUNQLEdBQVIsR0FBY0csSUFBZCxDQUFtQkMsSUFBSSxJQUFJUyxNQUFNLENBQUNULElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCUyxPQUFsQixDQUEwQkUsT0FBMUIsQ0FBM0I7QUFFSCxDQTFCRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jbGFzcyBTdHVkZW50cyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3N0dWRlbnRzLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5jbGFzcyBDbGFzc2VzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvY2xhc3Mtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc2Nob29sLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5qZXN0Lm1vY2soJ2F4aW9zJyk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBTdHVkZW50cycsICgpID0+IHtcbiAgICBjb25zdCBzdHVkZW50cyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICBcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIlN5ZG5leSBHaXJscyBIaWdoIFNjaG9vbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJMYXJhIFdhbGxzXCIsXG4gICAgICAgIFwic2NvcmVcIjogNzA5LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogNFxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiRm9ydCBTdHJlZXQgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiSmVuaWZlciBNaWxsc1wiLFxuICAgICAgICBcInNjb3JlXCI6IDU1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogXCJQcmVwXCJcbiAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzdHVkZW50cyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgU3R1ZGVudHMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwLmRhdGEpLnRvRXF1YWwoc3R1ZGVudHMpKTtcbiAgICBcbn0pO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggQ2xhc3NlcycsICgpID0+IHtcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBbIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkZvcnQgU3RyZWV0IEhpZ2ggU2Nob29sXCIsXG4gICAgICAgIFwidGVhY2hlcl9uYW1lXCI6IFwiQ29ubmllIE1ja25pZ2h0XCIsXG4gICAgICAgIFwic2NvcmVcIjogODU2NixcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDFcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJCcnNpYmFuZSBIaWdoXCIsXG4gICAgICAgIFwidGVhY2hlcl9uYW1lXCI6IFwiUmF0bGlmZiBXaGVlbGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogNjg4MCxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJQZXJ0aCBNb2Rlcm4gU2Nob29sXCIsXG4gICAgICAgIFwidGVhY2hlcl9uYW1lXCI6IFwiSGVsZW5hIEJhdWVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTEzNyxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDRcbiAgICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IGNsYXNzZXMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgIENsYXNzZXMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwLmRhdGEpLnRvRXF1YWwoY2xhc3NlcykpO1xufSk7XG5cblxudGVzdCgnU2hvdWxkIGZldGNoIFNjaG9vbHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc2Nob29scyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjpcIkJyc2liYW5lIEhpZ2hcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJCcmFuZGllIE1jZ2VlXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkdvbGQgQ29hc3QsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6OTU2MDhcbiAgICAgfSxcbiAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6XCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwiYWRtaW5fbmFtZVwiOlwiTWNpbnRvc2ggTmVsc29uXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkJyc2liYW5lLCBRTERcIixcbiAgICAgICAgXCJzY29yZVwiOjI0NjIzXG4gICAgIH0sXG4gICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOlwiR29sZCBDb2FzdCBQcmltYXJ5XCIsXG4gICAgICAgIFwiYWRtaW5fbmFtZVwiOlwiQnVyY2ggV2hpdGZpZWxkXCIsXG4gICAgICAgIFwic2Nob29sX2FkZHJlc3NcIjpcIkdvbGQgQ29hc3QsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6Mzk2NDhcbiAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc2Nob29scyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgU2Nob29scy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChzY2hvb2xzKSk7XG4gICAgXG59KTtcblxuIl19