fac706c73ded2ad99946ffee327fc5a2
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json').then(resp => resp.data);
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockResolvedValue(resp); // axios.get.mockImplementation(() => Promise.resolve(resp));
  // Students.all().then(resp => expect(resp.data).toEqual(students));

  return Students.all().then(data => expect(data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }, {
    "school_name": "Brsibane High",
    "teacher_name": "Ratliff Wheeler",
    "score": 6880,
    "class_name": 5
  }, {
    "school_name": "Perth Modern School",
    "teacher_name": "Helena Bauer",
    "score": 9137,
    "class_name": 4
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }, {
    "school_name": "state central",
    "admin_name": "Mcintosh Nelson",
    "school_address": "Brsibane, QLD",
    "score": 24623
  }, {
    "school_name": "Gold Coast Primary",
    "admin_name": "Burch Whitfield",
    "school_address": "Gold Coast, QLD",
    "score": 39648
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsInJlc3AiLCJkYXRhIiwiQ2xhc3NlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzY2hvb2xzIl0sIm1hcHBpbmdzIjoiQUFzQkFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLE9BQVY7O0FBdEJBLE1BQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBRUEsTUFBTUMsUUFBTixDQUFlO0FBQ1gsZUFBYUMsR0FBYixHQUFtQjtBQUNoQixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsOEJBQVYsRUFBMENDLElBQTFDLENBQStDQyxJQUFJLElBQUlBLElBQUksQ0FBQ0MsSUFBNUQsQ0FBaEI7QUFDQSxXQUFPSixHQUFQO0FBQ0Q7O0FBSlM7O0FBT2YsTUFBTUssT0FBTixDQUFjO0FBQ1YsZUFBYU4sR0FBYixHQUFtQjtBQUNoQixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsMkJBQVYsRUFBdUNDLElBQXZDLENBQTRDQyxJQUFJLElBQUlBLElBQUksQ0FBQ0MsSUFBekQsQ0FBaEI7QUFDQSxXQUFPSixHQUFQO0FBQ0Q7O0FBSlE7O0FBTWQsTUFBTU0sT0FBTixDQUFjO0FBQ1YsZUFBYVAsR0FBYixHQUFtQjtBQUNoQixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsNEJBQVYsRUFBd0NDLElBQXhDLENBQTZDQyxJQUFJLElBQUlBLElBQUksQ0FBQ0MsSUFBMUQsQ0FBaEI7QUFDQSxXQUFPSixHQUFQO0FBQ0Q7O0FBSlE7O0FBU2RPLElBQUksQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBQ2hDLFFBQU1DLFFBQVEsR0FBRyxDQUFDO0FBQ2QsbUJBQWUsZUFERDtBQUVkLFlBQVEsZUFGTTtBQUdkLGFBQVMsR0FISztBQUlkLGtCQUFjO0FBSkEsR0FBRCxFQU1qQjtBQUNJLG1CQUFlLDBCQURuQjtBQUVJLFlBQVEsWUFGWjtBQUdJLGFBQVMsR0FIYjtBQUlJLGtCQUFjO0FBSmxCLEdBTmlCLEVBWWpCO0FBQ0ksbUJBQWUseUJBRG5CO0FBRUksWUFBUSxlQUZaO0FBR0ksYUFBUyxFQUhiO0FBSUksa0JBQWM7QUFKbEIsR0FaaUIsQ0FBakI7QUFtQkEsUUFBTUwsSUFBSSxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBR0k7QUFBVCxHQUFiO0FBQ0FaLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVUSxpQkFBVixDQUE0Qk4sSUFBNUIsRUFyQmdDLENBc0JqQztBQUVBOztBQUNDLFNBQU9MLFFBQVEsQ0FBQ0MsR0FBVCxHQUFlRyxJQUFmLENBQW9CRSxJQUFJLElBQUlNLE1BQU0sQ0FBQ04sSUFBRCxDQUFOLENBQWFPLE9BQWIsQ0FBcUJILFFBQXJCLENBQTVCLENBQVA7QUFDSCxDQTFCRyxDQUFKO0FBNEJBRCxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUUvQixRQUFNSyxPQUFPLEdBQUcsQ0FBRTtBQUNkLG1CQUFlLHlCQUREO0FBRWQsb0JBQWdCLGlCQUZGO0FBR2QsYUFBUyxJQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFGLEVBTWQ7QUFDRSxtQkFBZSxlQURqQjtBQUVFLG9CQUFnQixpQkFGbEI7QUFHRSxhQUFTLElBSFg7QUFJRSxrQkFBYztBQUpoQixHQU5jLEVBWWQ7QUFDRSxtQkFBZSxxQkFEakI7QUFFRSxvQkFBZ0IsY0FGbEI7QUFHRSxhQUFTLElBSFg7QUFJRSxrQkFBYztBQUpoQixHQVpjLENBQWhCO0FBbUJBLFFBQU1ULElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdRO0FBQVQsR0FBYjtBQUVBaEIsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVZLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQlosSUFBaEIsQ0FBbkM7QUFFQUUsRUFBQUEsT0FBTyxDQUFDTixHQUFSLEdBQWNHLElBQWQsQ0FBbUJDLElBQUksSUFBSU8sTUFBTSxDQUFDUCxJQUFJLENBQUNDLElBQU4sQ0FBTixDQUFrQk8sT0FBbEIsQ0FBMEJDLE9BQTFCLENBQTNCO0FBQ0gsQ0ExQkcsQ0FBSjtBQTZCQUwsSUFBSSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFDL0IsUUFBTVMsT0FBTyxHQUFHLENBQUM7QUFDYixtQkFBYyxlQUREO0FBRWIsa0JBQWEsZUFGQTtBQUdiLHNCQUFpQixpQkFISjtBQUliLGFBQVE7QUFKSyxHQUFELEVBTWY7QUFDRyxtQkFBYyxlQURqQjtBQUVHLGtCQUFhLGlCQUZoQjtBQUdHLHNCQUFpQixlQUhwQjtBQUlHLGFBQVE7QUFKWCxHQU5lLEVBWWY7QUFDRyxtQkFBYyxvQkFEakI7QUFFRyxrQkFBYSxpQkFGaEI7QUFHRyxzQkFBaUIsaUJBSHBCO0FBSUcsYUFBUTtBQUpYLEdBWmUsQ0FBaEI7QUFtQkEsUUFBTWIsSUFBSSxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBR1k7QUFBVCxHQUFiO0FBRUFwQixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVVksa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCWixJQUFoQixDQUFuQztBQUVBRyxFQUFBQSxPQUFPLENBQUNQLEdBQVIsR0FBY0csSUFBZCxDQUFtQkMsSUFBSSxJQUFJTyxNQUFNLENBQUNQLElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCTyxPQUFsQixDQUEwQkssT0FBMUIsQ0FBM0I7QUFFSCxDQTFCRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jbGFzcyBTdHVkZW50cyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3N0dWRlbnRzLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5jbGFzcyBDbGFzc2VzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvY2xhc3Mtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc2Nob29sLXNjb3Jlcy5qc29uJykudGhlbihyZXNwID0+IHJlc3AuZGF0YSk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5qZXN0Lm1vY2soJ2F4aW9zJyk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBTdHVkZW50cycsICgpID0+IHtcbiAgICBjb25zdCBzdHVkZW50cyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImFseWNlIGZpc2NoZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5OTUsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJTeWRuZXkgR2lybHMgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiTGFyYSBXYWxsc1wiLFxuICAgICAgICBcInNjb3JlXCI6IDcwOSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkZvcnQgU3RyZWV0IEhpZ2ggU2Nob29sXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIkplbmlmZXIgTWlsbHNcIixcbiAgICAgICAgXCJzY29yZVwiOiA1NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IFwiUHJlcFwiXG4gICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc3R1ZGVudHMgfTtcbiAgICBheGlvcy5nZXQubW9ja1Jlc29sdmVkVmFsdWUocmVzcCk7XG4gICAvLyBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgIC8vIFN0dWRlbnRzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKHN0dWRlbnRzKSk7XG4gICAgcmV0dXJuIFN0dWRlbnRzLmFsbCgpLnRoZW4oZGF0YSA9PiBleHBlY3QoZGF0YSkudG9FcXVhbChzdHVkZW50cykpO1xufSk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBDbGFzc2VzJywgKCkgPT4ge1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IFsge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiRm9ydCBTdHJlZXQgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJDb25uaWUgTWNrbmlnaHRcIixcbiAgICAgICAgXCJzY29yZVwiOiA4NTY2LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkJyc2liYW5lIEhpZ2hcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJSYXRsaWZmIFdoZWVsZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA2ODgwLFxuICAgICAgICBcImNsYXNzX25hbWVcIjogNVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIlBlcnRoIE1vZGVybiBTY2hvb2xcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJIZWxlbmEgQmF1ZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5MTM3LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogNFxuICAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogY2xhc3NlcyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgQ2xhc3Nlcy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChjbGFzc2VzKSk7XG59KTtcblxuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU2Nob29scycsICgpID0+IHtcbiAgICBjb25zdCBzY2hvb2xzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOlwiQnJzaWJhbmUgSGlnaFwiLFxuICAgICAgICBcImFkbWluX25hbWVcIjpcIkJyYW5kaWUgTWNnZWVcIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiR29sZCBDb2FzdCwgUUxEXCIsXG4gICAgICAgIFwic2NvcmVcIjo5NTYwOFxuICAgICB9LFxuICAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjpcInN0YXRlIGNlbnRyYWxcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJNY2ludG9zaCBOZWxzb25cIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiQnJzaWJhbmUsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6MjQ2MjNcbiAgICAgfSxcbiAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6XCJHb2xkIENvYXN0IFByaW1hcnlcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJCdXJjaCBXaGl0ZmllbGRcIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiR29sZCBDb2FzdCwgUUxEXCIsXG4gICAgICAgIFwic2NvcmVcIjozOTY0OFxuICAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzY2hvb2xzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgICBTY2hvb2xzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKHNjaG9vbHMpKTtcbiAgICBcbn0pO1xuXG4iXX0=