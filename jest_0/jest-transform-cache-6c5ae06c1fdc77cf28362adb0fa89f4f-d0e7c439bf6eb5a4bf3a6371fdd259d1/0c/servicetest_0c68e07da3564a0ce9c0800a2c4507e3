7efac8f86015f0730ec8c8b723afa491
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json');
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json');
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json');
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Students.all().then(resp => expect(resp.data).toEqual(res));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }, {
    "school_name": "Brsibane High",
    "teacher_name": "Ratliff Wheeler",
    "score": 6880,
    "class_name": 5
  }, {
    "school_name": "Perth Modern School",
    "teacher_name": "Helena Bauer",
    "score": 9137,
    "class_name": 4
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }, {
    "school_name": "state central",
    "admin_name": "Mcintosh Nelson",
    "school_address": "Brsibane, QLD",
    "score": 24623
  }, {
    "school_name": "Gold Coast Primary",
    "admin_name": "Burch Whitfield",
    "school_address": "Gold Coast, QLD",
    "score": 39648
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwiQ2xhc3NlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJyZXNwIiwiZGF0YSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBc0JBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXRCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLGVBQWFDLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDhCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpTOztBQU9mLE1BQU1FLE9BQU4sQ0FBYztBQUNWLGVBQWFILEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDJCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQU1kLE1BQU1HLE9BQU4sQ0FBYztBQUNWLGVBQWFKLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDRCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQVNkSSxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUNoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFFZCxZQUFRLGVBRk07QUFHZCxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsRUFNakI7QUFDSSxtQkFBZSwwQkFEbkI7QUFFSSxZQUFRLFlBRlo7QUFHSSxhQUFTLEdBSGI7QUFJSSxrQkFBYztBQUpsQixHQU5pQixFQVlqQjtBQUNJLG1CQUFlLHlCQURuQjtBQUVJLFlBQVEsZUFGWjtBQUdJLGFBQVMsRUFIYjtBQUlJLGtCQUFjO0FBSmxCLEdBWmlCLENBQWpCO0FBbUJBLFFBQU1DLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdGO0FBQVQsR0FBYjtBQUVBVCxFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVU8sa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCSixJQUFoQixDQUFuQztBQUVBUixFQUFBQSxRQUFRLENBQUNDLEdBQVQsR0FBZVksSUFBZixDQUFvQkwsSUFBSSxJQUFJTSxNQUFNLENBQUNOLElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCTSxPQUFsQixDQUEwQmIsR0FBMUIsQ0FBNUI7QUFFSCxDQTFCRyxDQUFKO0FBNEJBSSxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUUvQixRQUFNVSxPQUFPLEdBQUcsQ0FBRTtBQUNkLG1CQUFlLHlCQUREO0FBRWQsb0JBQWdCLGlCQUZGO0FBR2QsYUFBUyxJQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFGLEVBTWQ7QUFDRSxtQkFBZSxlQURqQjtBQUVFLG9CQUFnQixpQkFGbEI7QUFHRSxhQUFTLElBSFg7QUFJRSxrQkFBYztBQUpoQixHQU5jLEVBWWQ7QUFDRSxtQkFBZSxxQkFEakI7QUFFRSxvQkFBZ0IsY0FGbEI7QUFHRSxhQUFTLElBSFg7QUFJRSxrQkFBYztBQUpoQixHQVpjLENBQWhCO0FBbUJBLFFBQU1SLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdPO0FBQVQsR0FBYjtBQUVBbEIsRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVPLGtCQUFWLENBQTZCLE1BQU1DLE9BQU8sQ0FBQ0MsT0FBUixDQUFnQkosSUFBaEIsQ0FBbkM7QUFFQUosRUFBQUEsT0FBTyxDQUFDSCxHQUFSLEdBQWNZLElBQWQsQ0FBbUJMLElBQUksSUFBSU0sTUFBTSxDQUFDTixJQUFJLENBQUNDLElBQU4sQ0FBTixDQUFrQk0sT0FBbEIsQ0FBMEJDLE9BQTFCLENBQTNCO0FBQ0gsQ0ExQkcsQ0FBSjtBQTZCQVYsSUFBSSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFDL0IsUUFBTVcsT0FBTyxHQUFHLENBQUM7QUFDYixtQkFBYyxlQUREO0FBRWIsa0JBQWEsZUFGQTtBQUdiLHNCQUFpQixpQkFISjtBQUliLGFBQVE7QUFKSyxHQUFELEVBTWY7QUFDRyxtQkFBYyxlQURqQjtBQUVHLGtCQUFhLGlCQUZoQjtBQUdHLHNCQUFpQixlQUhwQjtBQUlHLGFBQVE7QUFKWCxHQU5lLEVBWWY7QUFDRyxtQkFBYyxvQkFEakI7QUFFRyxrQkFBYSxpQkFGaEI7QUFHRyxzQkFBaUIsaUJBSHBCO0FBSUcsYUFBUTtBQUpYLEdBWmUsQ0FBaEI7QUFtQkEsUUFBTVQsSUFBSSxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBR1E7QUFBVCxHQUFiO0FBRUFuQixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVU8sa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCSixJQUFoQixDQUFuQztBQUVBSCxFQUFBQSxPQUFPLENBQUNKLEdBQVIsR0FBY1ksSUFBZCxDQUFtQkwsSUFBSSxJQUFJTSxNQUFNLENBQUNOLElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCTSxPQUFsQixDQUEwQkUsT0FBMUIsQ0FBM0I7QUFFSCxDQTFCRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuXG5jbGFzcyBTdHVkZW50cyB7XG4gICAgc3RhdGljIGFzeW5jIGFsbCgpIHtcbiAgICAgICBsZXQgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KCcuLi9kYXRhL3N0dWRlbnRzLXNjb3Jlcy5qc29uJyk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5jbGFzcyBDbGFzc2VzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvY2xhc3Mtc2NvcmVzLmpzb24nKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5jbGFzcyBTY2hvb2xzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc2Nob29sLXNjb3Jlcy5qc29uJyk7XG4gICAgICAgcmV0dXJuIHJlcztcbiAgICAgfVxufVxuXG5qZXN0Lm1vY2soJ2F4aW9zJyk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBTdHVkZW50cycsICgpID0+IHtcbiAgICBjb25zdCBzdHVkZW50cyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImFseWNlIGZpc2NoZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5OTUsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJTeWRuZXkgR2lybHMgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiTGFyYSBXYWxsc1wiLFxuICAgICAgICBcInNjb3JlXCI6IDcwOSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkZvcnQgU3RyZWV0IEhpZ2ggU2Nob29sXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIkplbmlmZXIgTWlsbHNcIixcbiAgICAgICAgXCJzY29yZVwiOiA1NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IFwiUHJlcFwiXG4gICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc3R1ZGVudHMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgIFN0dWRlbnRzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKHJlcykpO1xuICAgIFxufSk7XG5cbnRlc3QoJ1Nob3VsZCBmZXRjaCBDbGFzc2VzJywgKCkgPT4ge1xuXG4gICAgY29uc3QgY2xhc3NlcyA9IFsge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiRm9ydCBTdHJlZXQgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJDb25uaWUgTWNrbmlnaHRcIixcbiAgICAgICAgXCJzY29yZVwiOiA4NTY2LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogMVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkJyc2liYW5lIEhpZ2hcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJSYXRsaWZmIFdoZWVsZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA2ODgwLFxuICAgICAgICBcImNsYXNzX25hbWVcIjogNVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIlBlcnRoIE1vZGVybiBTY2hvb2xcIixcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJIZWxlbmEgQmF1ZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5MTM3LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogNFxuICAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogY2xhc3NlcyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgQ2xhc3Nlcy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChjbGFzc2VzKSk7XG59KTtcblxuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU2Nob29scycsICgpID0+IHtcbiAgICBjb25zdCBzY2hvb2xzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOlwiQnJzaWJhbmUgSGlnaFwiLFxuICAgICAgICBcImFkbWluX25hbWVcIjpcIkJyYW5kaWUgTWNnZWVcIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiR29sZCBDb2FzdCwgUUxEXCIsXG4gICAgICAgIFwic2NvcmVcIjo5NTYwOFxuICAgICB9LFxuICAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjpcInN0YXRlIGNlbnRyYWxcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJNY2ludG9zaCBOZWxzb25cIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiQnJzaWJhbmUsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6MjQ2MjNcbiAgICAgfSxcbiAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6XCJHb2xkIENvYXN0IFByaW1hcnlcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJCdXJjaCBXaGl0ZmllbGRcIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiR29sZCBDb2FzdCwgUUxEXCIsXG4gICAgICAgIFwic2NvcmVcIjozOTY0OFxuICAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzY2hvb2xzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgICBTY2hvb2xzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKHNjaG9vbHMpKTtcbiAgICBcbn0pO1xuXG4iXX0=