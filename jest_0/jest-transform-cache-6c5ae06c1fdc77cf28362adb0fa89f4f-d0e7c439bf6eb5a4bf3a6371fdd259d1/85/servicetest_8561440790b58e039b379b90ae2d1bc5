6ad7f6874f2c9c5d3abc6501495b599e
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json');
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json');
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json');
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Students.all().then(resp => expect(resp.data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }, {
    "teacher_name": "Ratliff Wheeler",
    "score": 6880,
    "class_name": 5
  }, {
    "teacher_name": "Helena Bauer",
    "score": 9137,
    "class_name": 4
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
test('Should fetch Schools', () => {
  const schools = [{
    "school_name": "Brsibane High",
    "admin_name": "Brandie Mcgee",
    "school_address": "Gold Coast, QLD",
    "score": 95608
  }, {
    "school_name": "state central",
    "admin_name": "Mcintosh Nelson",
    "school_address": "Brsibane, QLD",
    "score": 24623
  }, {
    "school_name": "Gold Coast Primary",
    "admin_name": "Burch Whitfield",
    "school_address": "Gold Coast, QLD",
    "score": 39648
  }];
  const resp = {
    data: schools
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Schools.all().then(resp => expect(resp.data).toEqual(schools));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwiQ2xhc3NlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJyZXNwIiwiZGF0YSIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsImV4cGVjdCIsInRvRXF1YWwiLCJjbGFzc2VzIiwic2Nob29scyJdLCJtYXBwaW5ncyI6IkFBc0JBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQXRCQSxNQUFNQyxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUVBLE1BQU1DLFFBQU4sQ0FBZTtBQUNYLGVBQWFDLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDhCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpTOztBQU9mLE1BQU1FLE9BQU4sQ0FBYztBQUNWLGVBQWFILEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDJCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQU1kLE1BQU1HLE9BQU4sQ0FBYztBQUNWLGVBQWFKLEdBQWIsR0FBbUI7QUFDaEIsUUFBSUMsR0FBRyxHQUFHLE1BQU1KLEtBQUssQ0FBQ0ssR0FBTixDQUFVLDRCQUFWLENBQWhCO0FBQ0EsV0FBT0QsR0FBUDtBQUNEOztBQUpROztBQVNkSSxJQUFJLENBQUMsdUJBQUQsRUFBMEIsTUFBTTtBQUNoQyxRQUFNQyxRQUFRLEdBQUcsQ0FBQztBQUNkLG1CQUFlLGVBREQ7QUFFZCxZQUFRLGVBRk07QUFHZCxhQUFTLEdBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUQsRUFNakI7QUFDSSxtQkFBZSwwQkFEbkI7QUFFSSxZQUFRLFlBRlo7QUFHSSxhQUFTLEdBSGI7QUFJSSxrQkFBYztBQUpsQixHQU5pQixFQVlqQjtBQUNJLG1CQUFlLHlCQURuQjtBQUVJLFlBQVEsZUFGWjtBQUdJLGFBQVMsRUFIYjtBQUlJLGtCQUFjO0FBSmxCLEdBWmlCLENBQWpCO0FBbUJBLFFBQU1DLElBQUksR0FBRztBQUFFQyxJQUFBQSxJQUFJLEVBQUdGO0FBQVQsR0FBYjtBQUVBVCxFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVU8sa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCSixJQUFoQixDQUFuQztBQUVBUixFQUFBQSxRQUFRLENBQUNDLEdBQVQsR0FBZVksSUFBZixDQUFvQkwsSUFBSSxJQUFJTSxNQUFNLENBQUNOLElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCTSxPQUFsQixDQUEwQlIsUUFBMUIsQ0FBNUI7QUFDSCxDQXpCRyxDQUFKO0FBMkJBRCxJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUUvQixRQUFNVSxPQUFPLEdBQUcsQ0FBRTtBQUVkLG9CQUFnQixpQkFGRjtBQUdkLGFBQVMsSUFISztBQUlkLGtCQUFjO0FBSkEsR0FBRixFQU1kO0FBRUUsb0JBQWdCLGlCQUZsQjtBQUdFLGFBQVMsSUFIWDtBQUlFLGtCQUFjO0FBSmhCLEdBTmMsRUFZZDtBQUVFLG9CQUFnQixjQUZsQjtBQUdFLGFBQVMsSUFIWDtBQUlFLGtCQUFjO0FBSmhCLEdBWmMsQ0FBaEI7QUFtQkEsUUFBTVIsSUFBSSxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBR087QUFBVCxHQUFiO0FBRUFsQixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVU8sa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCSixJQUFoQixDQUFuQztBQUVBSixFQUFBQSxPQUFPLENBQUNILEdBQVIsR0FBY1ksSUFBZCxDQUFtQkwsSUFBSSxJQUFJTSxNQUFNLENBQUNOLElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCTSxPQUFsQixDQUEwQkMsT0FBMUIsQ0FBM0I7QUFDSCxDQTFCRyxDQUFKO0FBNkJBVixJQUFJLENBQUMsc0JBQUQsRUFBeUIsTUFBTTtBQUMvQixRQUFNVyxPQUFPLEdBQUcsQ0FBQztBQUNiLG1CQUFjLGVBREQ7QUFFYixrQkFBYSxlQUZBO0FBR2Isc0JBQWlCLGlCQUhKO0FBSWIsYUFBUTtBQUpLLEdBQUQsRUFNZjtBQUNHLG1CQUFjLGVBRGpCO0FBRUcsa0JBQWEsaUJBRmhCO0FBR0csc0JBQWlCLGVBSHBCO0FBSUcsYUFBUTtBQUpYLEdBTmUsRUFZZjtBQUNHLG1CQUFjLG9CQURqQjtBQUVHLGtCQUFhLGlCQUZoQjtBQUdHLHNCQUFpQixpQkFIcEI7QUFJRyxhQUFRO0FBSlgsR0FaZSxDQUFoQjtBQW1CQSxRQUFNVCxJQUFJLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFHUTtBQUFULEdBQWI7QUFFQW5CLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVTyxrQkFBVixDQUE2QixNQUFNQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JKLElBQWhCLENBQW5DO0FBRUFILEVBQUFBLE9BQU8sQ0FBQ0osR0FBUixHQUFjWSxJQUFkLENBQW1CTCxJQUFJLElBQUlNLE1BQU0sQ0FBQ04sSUFBSSxDQUFDQyxJQUFOLENBQU4sQ0FBa0JNLE9BQWxCLENBQTBCRSxPQUExQixDQUEzQjtBQUVILENBMUJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbmNsYXNzIFN0dWRlbnRzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc3R1ZGVudHMtc2NvcmVzLmpzb24nKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5cbmNsYXNzIENsYXNzZXMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9jbGFzcy1zY29yZXMuanNvbicpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cbmNsYXNzIFNjaG9vbHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zY2hvb2wtc2NvcmVzLmpzb24nKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5cbmplc3QubW9jaygnYXhpb3MnKTtcblxudGVzdCgnU2hvdWxkIGZldGNoIFN0dWRlbnRzJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0dWRlbnRzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcInN0YXRlIGNlbnRyYWxcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYWx5Y2UgZmlzY2hlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDk5NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIlN5ZG5leSBHaXJscyBIaWdoIFNjaG9vbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJMYXJhIFdhbGxzXCIsXG4gICAgICAgIFwic2NvcmVcIjogNzA5LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogNFxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiRm9ydCBTdHJlZXQgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiSmVuaWZlciBNaWxsc1wiLFxuICAgICAgICBcInNjb3JlXCI6IDU1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogXCJQcmVwXCJcbiAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzdHVkZW50cyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgU3R1ZGVudHMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwLmRhdGEpLnRvRXF1YWwoc3R1ZGVudHMpKTtcbn0pO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggQ2xhc3NlcycsICgpID0+IHtcblxuICAgIGNvbnN0IGNsYXNzZXMgPSBbIHtcblxuICAgICAgICBcInRlYWNoZXJfbmFtZVwiOiBcIkNvbm5pZSBNY2tuaWdodFwiLFxuICAgICAgICBcInNjb3JlXCI6IDg1NjYsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAxXG4gICAgICB9LFxuICAgICAge1xuICAgICAgIFxuICAgICAgICBcInRlYWNoZXJfbmFtZVwiOiBcIlJhdGxpZmYgV2hlZWxlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDY4ODAsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiA1XG4gICAgICB9LFxuICAgICAge1xuICAgICBcbiAgICAgICAgXCJ0ZWFjaGVyX25hbWVcIjogXCJIZWxlbmEgQmF1ZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5MTM3LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogNFxuICAgICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogY2xhc3NlcyB9O1xuXG4gICAgYXhpb3MuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBQcm9taXNlLnJlc29sdmUocmVzcCkpO1xuXG4gICAgQ2xhc3Nlcy5hbGwoKS50aGVuKHJlc3AgPT4gZXhwZWN0KHJlc3AuZGF0YSkudG9FcXVhbChjbGFzc2VzKSk7XG59KTtcblxuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU2Nob29scycsICgpID0+IHtcbiAgICBjb25zdCBzY2hvb2xzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOlwiQnJzaWJhbmUgSGlnaFwiLFxuICAgICAgICBcImFkbWluX25hbWVcIjpcIkJyYW5kaWUgTWNnZWVcIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiR29sZCBDb2FzdCwgUUxEXCIsXG4gICAgICAgIFwic2NvcmVcIjo5NTYwOFxuICAgICB9LFxuICAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjpcInN0YXRlIGNlbnRyYWxcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJNY2ludG9zaCBOZWxzb25cIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiQnJzaWJhbmUsIFFMRFwiLFxuICAgICAgICBcInNjb3JlXCI6MjQ2MjNcbiAgICAgfSxcbiAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6XCJHb2xkIENvYXN0IFByaW1hcnlcIixcbiAgICAgICAgXCJhZG1pbl9uYW1lXCI6XCJCdXJjaCBXaGl0ZmllbGRcIixcbiAgICAgICAgXCJzY2hvb2xfYWRkcmVzc1wiOlwiR29sZCBDb2FzdCwgUUxEXCIsXG4gICAgICAgIFwic2NvcmVcIjozOTY0OFxuICAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzY2hvb2xzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgICBTY2hvb2xzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKHNjaG9vbHMpKTtcbiAgICBcbn0pO1xuXG4iXX0=