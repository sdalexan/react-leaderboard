32659d0fe6371316879399737979fd35
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json').then(res => res.data);
    return res;
  }

}

module.exports = Students;

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 3
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  return Students.all().then(data => expect(data).toEqual(students));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsImRhdGEiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ2xhc3NlcyIsInJlc3AiLCJTY2hvb2xzIiwidGVzdCIsInN0dWRlbnRzIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJleHBlY3QiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiQUF3QkFBLElBQUksQ0FBQ0MsSUFBTCxDQUFVLE9BQVY7O0FBeEJBLE1BQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBRUEsTUFBTUMsUUFBTixDQUFlO0FBQ1gsZUFBYUMsR0FBYixHQUFtQjtBQUNmLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSw4QkFBVixFQUEwQ0MsSUFBMUMsQ0FBK0NGLEdBQUcsSUFBSUEsR0FBRyxDQUFDRyxJQUExRCxDQUFoQjtBQUNBLFdBQU9ILEdBQVA7QUFDRjs7QUFKUzs7QUFNZkksTUFBTSxDQUFDQyxPQUFQLEdBQWlCUCxRQUFqQjs7QUFFQSxNQUFNUSxPQUFOLENBQWM7QUFDVixlQUFhUCxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSwyQkFBVixFQUF1Q0MsSUFBdkMsQ0FBNENLLElBQUksSUFBSUEsSUFBSSxDQUFDSixJQUF6RCxDQUFoQjtBQUNBLFdBQU9ILEdBQVA7QUFDRDs7QUFKUTs7QUFNZCxNQUFNUSxPQUFOLENBQWM7QUFDVixlQUFhVCxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSw0QkFBVixFQUF3Q0MsSUFBeEMsQ0FBNkNLLElBQUksSUFBSUEsSUFBSSxDQUFDSixJQUExRCxDQUFoQjtBQUNBLFdBQU9ILEdBQVA7QUFDRDs7QUFKUTs7QUFVZFMsSUFBSSxDQUFDLHVCQUFELEVBQTBCLE1BQU07QUFDaEMsUUFBTUMsUUFBUSxHQUFHLENBQUM7QUFDZCxtQkFBZSxlQUREO0FBRWQsWUFBUSxlQUZNO0FBR2QsYUFBUyxHQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFELENBQWpCO0FBT0EsUUFBTUgsSUFBSSxHQUFHO0FBQUVKLElBQUFBLElBQUksRUFBR087QUFBVCxHQUFiO0FBRUFkLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVVSxrQkFBVixDQUE2QixNQUFNQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JOLElBQWhCLENBQW5DO0FBRUEsU0FBT1QsUUFBUSxDQUFDQyxHQUFULEdBQWVHLElBQWYsQ0FBb0JDLElBQUksSUFBSVcsTUFBTSxDQUFDWCxJQUFELENBQU4sQ0FBYVksT0FBYixDQUFxQkwsUUFBckIsQ0FBNUIsQ0FBUDtBQUVILENBZEcsQ0FBSiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcblxuY2xhc3MgU3R1ZGVudHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc3R1ZGVudHMtc2NvcmVzLmpzb24nKS50aGVuKHJlcyA9PiByZXMuZGF0YSk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gU3R1ZGVudHM7XG5cbmNsYXNzIENsYXNzZXMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9jbGFzcy1zY29yZXMuanNvbicpLnRoZW4ocmVzcCA9PiByZXNwLmRhdGEpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cbmNsYXNzIFNjaG9vbHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zY2hvb2wtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5cblxuamVzdC5tb2NrKCdheGlvcycpO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU3R1ZGVudHMnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3R1ZGVudHMgPSBbe1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwic3RhdGUgY2VudHJhbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJhbHljZSBmaXNjaGVyXCIsXG4gICAgICAgIFwic2NvcmVcIjogOTk1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogM1xuICAgIH1dO1xuXG4gICAgY29uc3QgcmVzcCA9IHsgZGF0YSA6IHN0dWRlbnRzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG4gICAgXG4gICAgcmV0dXJuIFN0dWRlbnRzLmFsbCgpLnRoZW4oZGF0YSA9PiBleHBlY3QoZGF0YSkudG9FcXVhbChzdHVkZW50cykpO1xuXG59KTtcblxuIl19