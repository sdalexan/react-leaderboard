84972e4b12462abd2567ee7007454d07
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json').then(resp => resp.data);
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json').then(resp => resp.data);
    return res;
  }

}

class Schools {
  static async all() {
    let res = await axios.get('../data/school-scores.json').then(resp => resp.data);
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockResolvedValue(resp); // axios.get.mockImplementation(() => Promise.resolve(resp));
  // Students.all().then(resp => expect(resp.data).toEqual(students));

  return Students.all().then(data => expect(data).toEqual(students));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwidGhlbiIsInJlc3AiLCJkYXRhIiwiQ2xhc3NlcyIsIlNjaG9vbHMiLCJ0ZXN0Iiwic3R1ZGVudHMiLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsImV4cGVjdCIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiJBQXNCQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsT0FBVjs7QUF0QkEsTUFBTUMsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFFQSxNQUFNQyxRQUFOLENBQWU7QUFDWCxlQUFhQyxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSw4QkFBVixFQUEwQ0MsSUFBMUMsQ0FBK0NDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUE1RCxDQUFoQjtBQUNBLFdBQU9KLEdBQVA7QUFDRDs7QUFKUzs7QUFPZixNQUFNSyxPQUFOLENBQWM7QUFDVixlQUFhTixHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSwyQkFBVixFQUF1Q0MsSUFBdkMsQ0FBNENDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUF6RCxDQUFoQjtBQUNBLFdBQU9KLEdBQVA7QUFDRDs7QUFKUTs7QUFNZCxNQUFNTSxPQUFOLENBQWM7QUFDVixlQUFhUCxHQUFiLEdBQW1CO0FBQ2hCLFFBQUlDLEdBQUcsR0FBRyxNQUFNSixLQUFLLENBQUNLLEdBQU4sQ0FBVSw0QkFBVixFQUF3Q0MsSUFBeEMsQ0FBNkNDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxJQUExRCxDQUFoQjtBQUNBLFdBQU9KLEdBQVA7QUFDRDs7QUFKUTs7QUFTZE8sSUFBSSxDQUFDLHVCQUFELEVBQTBCLE1BQU07QUFDaEMsUUFBTUMsUUFBUSxHQUFHLENBQUM7QUFDZCxtQkFBZSxlQUREO0FBRWQsWUFBUSxlQUZNO0FBR2QsYUFBUyxHQUhLO0FBSWQsa0JBQWM7QUFKQSxHQUFELEVBTWpCO0FBQ0ksbUJBQWUsMEJBRG5CO0FBRUksWUFBUSxZQUZaO0FBR0ksYUFBUyxHQUhiO0FBSUksa0JBQWM7QUFKbEIsR0FOaUIsRUFZakI7QUFDSSxtQkFBZSx5QkFEbkI7QUFFSSxZQUFRLGVBRlo7QUFHSSxhQUFTLEVBSGI7QUFJSSxrQkFBYztBQUpsQixHQVppQixDQUFqQjtBQW1CQSxRQUFNTCxJQUFJLEdBQUc7QUFBRUMsSUFBQUEsSUFBSSxFQUFHSTtBQUFULEdBQWI7QUFDQVosRUFBQUEsS0FBSyxDQUFDSyxHQUFOLENBQVVRLGlCQUFWLENBQTRCTixJQUE1QixFQXJCZ0MsQ0FzQmpDO0FBRUE7O0FBQ0MsU0FBT0wsUUFBUSxDQUFDQyxHQUFULEdBQWVHLElBQWYsQ0FBb0JFLElBQUksSUFBSU0sTUFBTSxDQUFDTixJQUFELENBQU4sQ0FBYU8sT0FBYixDQUFxQkgsUUFBckIsQ0FBNUIsQ0FBUDtBQUNILENBMUJHLENBQUoiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XG5cbmNsYXNzIFN0dWRlbnRzIHtcbiAgICBzdGF0aWMgYXN5bmMgYWxsKCkge1xuICAgICAgIGxldCByZXMgPSBhd2FpdCBheGlvcy5nZXQoJy4uL2RhdGEvc3R1ZGVudHMtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5cbmNsYXNzIENsYXNzZXMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9jbGFzcy1zY29yZXMuanNvbicpLnRoZW4ocmVzcCA9PiByZXNwLmRhdGEpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cbmNsYXNzIFNjaG9vbHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zY2hvb2wtc2NvcmVzLmpzb24nKS50aGVuKHJlc3AgPT4gcmVzcC5kYXRhKTtcbiAgICAgICByZXR1cm4gcmVzO1xuICAgICB9XG59XG5cbmplc3QubW9jaygnYXhpb3MnKTtcblxudGVzdCgnU2hvdWxkIGZldGNoIFN0dWRlbnRzJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0dWRlbnRzID0gW3tcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcInN0YXRlIGNlbnRyYWxcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYWx5Y2UgZmlzY2hlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDk5NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDFcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIlN5ZG5leSBHaXJscyBIaWdoIFNjaG9vbFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJMYXJhIFdhbGxzXCIsXG4gICAgICAgIFwic2NvcmVcIjogNzA5LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogNFxuICAgIH0sXG4gICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiRm9ydCBTdHJlZXQgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiSmVuaWZlciBNaWxsc1wiLFxuICAgICAgICBcInNjb3JlXCI6IDU1LFxuICAgICAgICBcImNsYXNzX25hbWVcIjogXCJQcmVwXCJcbiAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBzdHVkZW50cyB9O1xuICAgIGF4aW9zLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZShyZXNwKTtcbiAgIC8vIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgLy8gU3R1ZGVudHMuYWxsKCkudGhlbihyZXNwID0+IGV4cGVjdChyZXNwLmRhdGEpLnRvRXF1YWwoc3R1ZGVudHMpKTtcbiAgICByZXR1cm4gU3R1ZGVudHMuYWxsKCkudGhlbihkYXRhID0+IGV4cGVjdChkYXRhKS50b0VxdWFsKHN0dWRlbnRzKSk7XG59KTtcblxuIl19