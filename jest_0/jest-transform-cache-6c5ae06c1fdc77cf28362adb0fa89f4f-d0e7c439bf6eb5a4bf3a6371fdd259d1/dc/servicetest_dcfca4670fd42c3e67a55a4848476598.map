{"version":3,"sources":["service.test.js"],"names":["jest","mock","axios","require","Students","all","res","get","then","resp","data","Classes","Schools","test","students","mockResolvedValue","expect","toEqual"],"mappings":"AAsBAA,IAAI,CAACC,IAAL,CAAU,OAAV;;AAtBA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,QAAN,CAAe;AACX,eAAaC,GAAb,GAAmB;AAChB,QAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,8BAAV,EAA0CC,IAA1C,CAA+CC,IAAI,IAAIA,IAAI,CAACC,IAA5D,CAAhB;AACA,WAAOJ,GAAP;AACD;;AAJS;;AAOf,MAAMK,OAAN,CAAc;AACV,eAAaN,GAAb,GAAmB;AAChB,QAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,2BAAV,EAAuCC,IAAvC,CAA4CC,IAAI,IAAIA,IAAI,CAACC,IAAzD,CAAhB;AACA,WAAOJ,GAAP;AACD;;AAJQ;;AAMd,MAAMM,OAAN,CAAc;AACV,eAAaP,GAAb,GAAmB;AAChB,QAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,4BAAV,EAAwCC,IAAxC,CAA6CC,IAAI,IAAIA,IAAI,CAACC,IAA1D,CAAhB;AACA,WAAOJ,GAAP;AACD;;AAJQ;;AASdO,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAChC,QAAMC,QAAQ,GAAG,CAAC;AACd,mBAAe,eADD;AAEd,YAAQ,eAFM;AAGd,aAAS,GAHK;AAId,kBAAc;AAJA,GAAD,EAMjB;AACI,mBAAe,0BADnB;AAEI,YAAQ,YAFZ;AAGI,aAAS,GAHb;AAII,kBAAc;AAJlB,GANiB,EAYjB;AACI,mBAAe,yBADnB;AAEI,YAAQ,eAFZ;AAGI,aAAS,EAHb;AAII,kBAAc;AAJlB,GAZiB,CAAjB;AAmBA,QAAML,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAGI;AAAT,GAAb;AACAZ,EAAAA,KAAK,CAACK,GAAN,CAAUQ,iBAAV,CAA4BN,IAA5B,EArBgC,CAsBjC;AAEA;;AACC,SAAOL,QAAQ,CAACC,GAAT,GAAeG,IAAf,CAAoBE,IAAI,IAAIM,MAAM,CAACN,IAAD,CAAN,CAAaO,OAAb,CAAqBH,QAArB,CAA5B,CAAP;AACH,CA1BG,CAAJ","sourcesContent":["const axios = require('axios');\n\nclass Students {\n    static async all() {\n       let res = await axios.get('../data/students-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\n\nclass Classes {\n    static async all() {\n       let res = await axios.get('../data/class-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\nclass Schools {\n    static async all() {\n       let res = await axios.get('../data/school-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 1\n    },\n    {\n        \"school_name\": \"Sydney Girls High School\",\n        \"name\": \"Lara Walls\",\n        \"score\": 709,\n        \"class_name\": 4\n    },\n    {\n        \"school_name\": \"Fort Street High School\",\n        \"name\": \"Jenifer Mills\",\n        \"score\": 55,\n        \"class_name\": \"Prep\"\n    }];\n\n    const resp = { data : students };\n    axios.get.mockResolvedValue(resp);\n   // axios.get.mockImplementation(() => Promise.resolve(resp));\n\n   // Students.all().then(resp => expect(resp.data).toEqual(students));\n    return Students.all().then(data => expect(data).toEqual(students));\n});\n\n"]}