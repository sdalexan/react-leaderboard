{"version":3,"sources":["service.test.js"],"names":["jest","mock","axios","require","Students","all","res","get","Classes","test","students","resp","data","mockImplementation","Promise","resolve","then","expect","toEqual","classes"],"mappings":"AAcAA,IAAI,CAACC,IAAL,CAAU,OAAV;;AAdA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,QAAN,CAAe;AACX,eAAaC,GAAb,GAAmB;AAChB,QAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,8BAAV,CAAhB;AACA,WAAOD,GAAP;AACD;;AAJS;;AAMf,MAAME,OAAN,CAAc;AACV,eAAaH,GAAb,GAAmB;AAChB,QAAIC,GAAG,GAAG,MAAMJ,KAAK,CAACK,GAAN,CAAU,2BAAV,CAAhB;AACA,WAAOD,GAAP;AACD;;AAJQ;;AASdG,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAEhC,QAAMC,QAAQ,GAAG,CAAC;AACd,mBAAe,eADD;AAEd,YAAQ,eAFM;AAGd,aAAS,GAHK;AAId,kBAAc;AAJA,GAAD,EAMjB;AACI,mBAAe,0BADnB;AAEI,YAAQ,YAFZ;AAGI,aAAS,GAHb;AAII,kBAAc;AAJlB,GANiB,EAYjB;AACI,mBAAe,yBADnB;AAEI,YAAQ,eAFZ;AAGI,aAAS,EAHb;AAII,kBAAc;AAJlB,GAZiB,CAAjB;AAmBA,QAAMC,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAGF;AAAT,GAAb;AAEAR,EAAAA,KAAK,CAACK,GAAN,CAAUM,kBAAV,CAA6B,MAAMC,OAAO,CAACC,OAAR,CAAgBJ,IAAhB,CAAnC;AAEAP,EAAAA,QAAQ,CAACC,GAAT,GAAeW,IAAf,CAAoBL,IAAI,IAAIM,MAAM,CAACN,IAAI,CAACC,IAAN,CAAN,CAAkBM,OAAlB,CAA0BR,QAA1B,CAA5B;AACH,CA1BG,CAAJ;AA4BAD,IAAI,CAAC,sBAAD,EAAyB,MAAM;AAE/B,QAAMU,OAAO,GAAG,CAAE;AACd,mBAAe,yBADD;AAEd,oBAAgB,iBAFF;AAGd,aAAS,IAHK;AAId,kBAAc;AAJA,GAAF,EAMd;AACE,mBAAe,eADjB;AAEE,oBAAgB,iBAFlB;AAGE,aAAS,IAHX;AAIE,kBAAc;AAJhB,GANc,EAYd;AACE,mBAAe,qBADjB;AAEE,oBAAgB,cAFlB;AAGE,aAAS,IAHX;AAIE,kBAAc;AAJhB,GAZc,CAAhB;AAmBA,QAAMR,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAGO;AAAT,GAAb;AAEAjB,EAAAA,KAAK,CAACK,GAAN,CAAUM,kBAAV,CAA6B,MAAMC,OAAO,CAACC,OAAR,CAAgBJ,IAAhB,CAAnC;AAEAH,EAAAA,OAAO,CAACH,GAAR,GAAcW,IAAd,CAAmBL,IAAI,IAAIM,MAAM,CAACN,IAAI,CAACC,IAAN,CAAN,CAAkBM,OAAlB,CAA0BC,OAA1B,CAA3B;AACH,CA1BG,CAAJ","sourcesContent":["const axios = require('axios');\nclass Students {\n    static async all() {\n       let res = await axios.get('../data/students-scores.json');\n       return res;\n     }\n}\nclass Classes {\n    static async all() {\n       let res = await axios.get('../data/class-scores.json');\n       return res;\n     }\n}\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 1\n    },\n    {\n        \"school_name\": \"Sydney Girls High School\",\n        \"name\": \"Lara Walls\",\n        \"score\": 709,\n        \"class_name\": 4\n    },\n    {\n        \"school_name\": \"Fort Street High School\",\n        \"name\": \"Jenifer Mills\",\n        \"score\": 55,\n        \"class_name\": \"Prep\"\n    }];\n\n    const resp = { data : students };\n\n    axios.get.mockImplementation(() => Promise.resolve(resp));\n\n    Students.all().then(resp => expect(resp.data).toEqual(students));\n});\n\ntest('Should fetch Classes', () => {\n\n    const classes = [ {\n        \"school_name\": \"Fort Street High School\",\n        \"teacher_name\": \"Connie Mcknight\",\n        \"score\": 8566,\n        \"class_name\": 1\n      },\n      {\n        \"school_name\": \"Brsibane High\",\n        \"teacher_name\": \"Ratliff Wheeler\",\n        \"score\": 6880,\n        \"class_name\": 5\n      },\n      {\n        \"school_name\": \"Perth Modern School\",\n        \"teacher_name\": \"Helena Bauer\",\n        \"score\": 9137,\n        \"class_name\": 4\n      }];\n\n    const resp = { data : classes };\n\n    axios.get.mockImplementation(() => Promise.resolve(resp));\n\n    Classes.all().then(resp => expect(resp.data).toEqual(classes));\n});"]}