bd7540e7db78c91c4053ef60a9fcbe86
jest.mock('axios');

const axios = require('axios');

class Students {
  static async all() {
    let res = await axios.get('../data/students-scores.json');
    return res;
  }

}

class Classes {
  static async all() {
    let res = await axios.get('../data/class-scores.json');
    return res;
  }

}

test('Should fetch Students', () => {
  const students = [{
    "school_name": "state central",
    "name": "alyce fischer",
    "score": 995,
    "class_name": 1
  }, {
    "school_name": "Sydney Girls High School",
    "name": "Lara Walls",
    "score": 709,
    "class_name": 4
  }, {
    "school_name": "Fort Street High School",
    "name": "Jenifer Mills",
    "score": 55,
    "class_name": "Prep"
  }];
  const resp = {
    data: students
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Students.all().then(resp => expect(resp.data).toEqual(students));
});
test('Should fetch Classes', () => {
  const classes = [{
    "school_name": "Fort Street High School",
    "teacher_name": "Connie Mcknight",
    "score": 8566,
    "class_name": 1
  }, {
    "school_name": "Brsibane High",
    "teacher_name": "Ratliff Wheeler",
    "score": 6880,
    "class_name": 5
  }, {
    "school_name": "Perth Modern School",
    "teacher_name": "Helena Bauer",
    "score": 9137,
    "class_name": 4
  }];
  const resp = {
    data: classes
  };
  axios.get.mockImplementation(() => Promise.resolve(resp));
  Classes.all().then(resp => expect(resp.data).toEqual(classes));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2UudGVzdC5qcyJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImF4aW9zIiwicmVxdWlyZSIsIlN0dWRlbnRzIiwiYWxsIiwicmVzIiwiZ2V0IiwiQ2xhc3NlcyIsInRlc3QiLCJzdHVkZW50cyIsInJlc3AiLCJkYXRhIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiZXhwZWN0IiwidG9FcXVhbCIsImNsYXNzZXMiXSwibWFwcGluZ3MiOiJBQWNBQSxJQUFJLENBQUNDLElBQUwsQ0FBVSxPQUFWOztBQWRBLE1BQU1DLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUMsUUFBTixDQUFlO0FBQ1gsZUFBYUMsR0FBYixHQUFtQjtBQUNoQixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsOEJBQVYsQ0FBaEI7QUFDQSxXQUFPRCxHQUFQO0FBQ0Q7O0FBSlM7O0FBTWYsTUFBTUUsT0FBTixDQUFjO0FBQ1YsZUFBYUgsR0FBYixHQUFtQjtBQUNoQixRQUFJQyxHQUFHLEdBQUcsTUFBTUosS0FBSyxDQUFDSyxHQUFOLENBQVUsMkJBQVYsQ0FBaEI7QUFDQSxXQUFPRCxHQUFQO0FBQ0Q7O0FBSlE7O0FBU2RHLElBQUksQ0FBQyx1QkFBRCxFQUEwQixNQUFNO0FBRWhDLFFBQU1DLFFBQVEsR0FBRyxDQUFDO0FBQ2QsbUJBQWUsZUFERDtBQUVkLFlBQVEsZUFGTTtBQUdkLGFBQVMsR0FISztBQUlkLGtCQUFjO0FBSkEsR0FBRCxFQU1qQjtBQUNJLG1CQUFlLDBCQURuQjtBQUVJLFlBQVEsWUFGWjtBQUdJLGFBQVMsR0FIYjtBQUlJLGtCQUFjO0FBSmxCLEdBTmlCLEVBWWpCO0FBQ0ksbUJBQWUseUJBRG5CO0FBRUksWUFBUSxlQUZaO0FBR0ksYUFBUyxFQUhiO0FBSUksa0JBQWM7QUFKbEIsR0FaaUIsQ0FBakI7QUFtQkEsUUFBTUMsSUFBSSxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBR0Y7QUFBVCxHQUFiO0FBRUFSLEVBQUFBLEtBQUssQ0FBQ0ssR0FBTixDQUFVTSxrQkFBVixDQUE2QixNQUFNQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0JKLElBQWhCLENBQW5DO0FBRUFQLEVBQUFBLFFBQVEsQ0FBQ0MsR0FBVCxHQUFlVyxJQUFmLENBQW9CTCxJQUFJLElBQUlNLE1BQU0sQ0FBQ04sSUFBSSxDQUFDQyxJQUFOLENBQU4sQ0FBa0JNLE9BQWxCLENBQTBCUixRQUExQixDQUE1QjtBQUNILENBMUJHLENBQUo7QUE0QkFELElBQUksQ0FBQyxzQkFBRCxFQUF5QixNQUFNO0FBRS9CLFFBQU1VLE9BQU8sR0FBRyxDQUFFO0FBQ2QsbUJBQWUseUJBREQ7QUFFZCxvQkFBZ0IsaUJBRkY7QUFHZCxhQUFTLElBSEs7QUFJZCxrQkFBYztBQUpBLEdBQUYsRUFNZDtBQUNFLG1CQUFlLGVBRGpCO0FBRUUsb0JBQWdCLGlCQUZsQjtBQUdFLGFBQVMsSUFIWDtBQUlFLGtCQUFjO0FBSmhCLEdBTmMsRUFZZDtBQUNFLG1CQUFlLHFCQURqQjtBQUVFLG9CQUFnQixjQUZsQjtBQUdFLGFBQVMsSUFIWDtBQUlFLGtCQUFjO0FBSmhCLEdBWmMsQ0FBaEI7QUFtQkEsUUFBTVIsSUFBSSxHQUFHO0FBQUVDLElBQUFBLElBQUksRUFBR087QUFBVCxHQUFiO0FBRUFqQixFQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVU0sa0JBQVYsQ0FBNkIsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLENBQWdCSixJQUFoQixDQUFuQztBQUVBSCxFQUFBQSxPQUFPLENBQUNILEdBQVIsR0FBY1csSUFBZCxDQUFtQkwsSUFBSSxJQUFJTSxNQUFNLENBQUNOLElBQUksQ0FBQ0MsSUFBTixDQUFOLENBQWtCTSxPQUFsQixDQUEwQkMsT0FBMUIsQ0FBM0I7QUFDSCxDQTFCRyxDQUFKIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYXhpb3MgPSByZXF1aXJlKCdheGlvcycpO1xuY2xhc3MgU3R1ZGVudHMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9zdHVkZW50cy1zY29yZXMuanNvbicpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cbmNsYXNzIENsYXNzZXMge1xuICAgIHN0YXRpYyBhc3luYyBhbGwoKSB7XG4gICAgICAgbGV0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCgnLi4vZGF0YS9jbGFzcy1zY29yZXMuanNvbicpO1xuICAgICAgIHJldHVybiByZXM7XG4gICAgIH1cbn1cblxuamVzdC5tb2NrKCdheGlvcycpO1xuXG50ZXN0KCdTaG91bGQgZmV0Y2ggU3R1ZGVudHMnLCAoKSA9PiB7XG5cbiAgICBjb25zdCBzdHVkZW50cyA9IFt7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJzdGF0ZSBjZW50cmFsXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImFseWNlIGZpc2NoZXJcIixcbiAgICAgICAgXCJzY29yZVwiOiA5OTUsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAxXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJTeWRuZXkgR2lybHMgSGlnaCBTY2hvb2xcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiTGFyYSBXYWxsc1wiLFxuICAgICAgICBcInNjb3JlXCI6IDcwOSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IDRcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJzY2hvb2xfbmFtZVwiOiBcIkZvcnQgU3RyZWV0IEhpZ2ggU2Nob29sXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIkplbmlmZXIgTWlsbHNcIixcbiAgICAgICAgXCJzY29yZVwiOiA1NSxcbiAgICAgICAgXCJjbGFzc19uYW1lXCI6IFwiUHJlcFwiXG4gICAgfV07XG5cbiAgICBjb25zdCByZXNwID0geyBkYXRhIDogc3R1ZGVudHMgfTtcblxuICAgIGF4aW9zLmdldC5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHJlc3ApKTtcblxuICAgIFN0dWRlbnRzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKHN0dWRlbnRzKSk7XG59KTtcblxudGVzdCgnU2hvdWxkIGZldGNoIENsYXNzZXMnLCAoKSA9PiB7XG5cbiAgICBjb25zdCBjbGFzc2VzID0gWyB7XG4gICAgICAgIFwic2Nob29sX25hbWVcIjogXCJGb3J0IFN0cmVldCBIaWdoIFNjaG9vbFwiLFxuICAgICAgICBcInRlYWNoZXJfbmFtZVwiOiBcIkNvbm5pZSBNY2tuaWdodFwiLFxuICAgICAgICBcInNjb3JlXCI6IDg1NjYsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiAxXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiQnJzaWJhbmUgSGlnaFwiLFxuICAgICAgICBcInRlYWNoZXJfbmFtZVwiOiBcIlJhdGxpZmYgV2hlZWxlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDY4ODAsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiA1XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInNjaG9vbF9uYW1lXCI6IFwiUGVydGggTW9kZXJuIFNjaG9vbFwiLFxuICAgICAgICBcInRlYWNoZXJfbmFtZVwiOiBcIkhlbGVuYSBCYXVlclwiLFxuICAgICAgICBcInNjb3JlXCI6IDkxMzcsXG4gICAgICAgIFwiY2xhc3NfbmFtZVwiOiA0XG4gICAgICB9XTtcblxuICAgIGNvbnN0IHJlc3AgPSB7IGRhdGEgOiBjbGFzc2VzIH07XG5cbiAgICBheGlvcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IFByb21pc2UucmVzb2x2ZShyZXNwKSk7XG5cbiAgICBDbGFzc2VzLmFsbCgpLnRoZW4ocmVzcCA9PiBleHBlY3QocmVzcC5kYXRhKS50b0VxdWFsKGNsYXNzZXMpKTtcbn0pOyJdfQ==