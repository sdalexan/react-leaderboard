{"version":3,"sources":["service.test.js"],"names":["jest","mock","axios","require","Students","all","Classes","res","get","then","resp","data","Schools","test","students","mockResolvedValue","expect","toEqual"],"mappings":"AAqBAA,IAAI,CAACC,IAAL,CAAU,OAAV;;AArBA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,QAAN,CAAe;AACX,eAAaC,GAAb,GAAmB,CAChB;AACD;;AAHS;;AAMf,MAAMC,OAAN,CAAc;AACV,eAAaD,GAAb,GAAmB;AAChB,QAAIE,GAAG,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,2BAAV,EAAuCC,IAAvC,CAA4CC,IAAI,IAAIA,IAAI,CAACC,IAAzD,CAAhB;AACA,WAAOJ,GAAP;AACD;;AAJQ;;AAMd,MAAMK,OAAN,CAAc;AACV,eAAaP,GAAb,GAAmB;AAChB,QAAIE,GAAG,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,4BAAV,EAAwCC,IAAxC,CAA6CC,IAAI,IAAIA,IAAI,CAACC,IAA1D,CAAhB;AACA,WAAOJ,GAAP;AACD;;AAJQ;;AASdM,IAAI,CAAC,uBAAD,EAA0B,MAAM;AAChC,QAAMC,QAAQ,GAAG,CAAC;AACd,mBAAe,eADD;AAEd,YAAQ,eAFM;AAGd,aAAS,GAHK;AAId,kBAAc;AAJA,GAAD,CAAjB;AAOA,QAAMJ,IAAI,GAAG;AAAEC,IAAAA,IAAI,EAAGG;AAAT,GAAb;AAEAZ,EAAAA,KAAK,CAACM,GAAN,CAAUO,iBAAV,CAA4BL,IAA5B;AAEA,SAAON,QAAQ,CAACC,GAAT,GAAeI,IAAf,CAAoBE,IAAI,IAAIK,MAAM,CAACL,IAAD,CAAN,CAAaM,OAAb,CAAqBH,QAArB,CAA5B,CAAP;AACH,CAbG,CAAJ","sourcesContent":["const axios = require('axios');\n\nclass Students {\n    static async all() {\n       // return await axios.get('../data/students-scoress.json').then(resp => resp.data);\n     }\n}\n\nclass Classes {\n    static async all() {\n       let res = await axios.get('../data/class-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\nclass Schools {\n    static async all() {\n       let res = await axios.get('../data/school-scores.json').then(resp => resp.data);\n       return res;\n     }\n}\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 1\n    }];\n\n    const resp = { data : students };\n\n    axios.get.mockResolvedValue(resp);\n\n    return Students.all().then(data => expect(data).toEqual(students));\n});\n\n"]}