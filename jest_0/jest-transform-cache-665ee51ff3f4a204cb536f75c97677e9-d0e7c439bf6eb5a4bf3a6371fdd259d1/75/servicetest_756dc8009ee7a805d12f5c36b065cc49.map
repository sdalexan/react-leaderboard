{"version":3,"sources":["service.test.js"],"names":["jest","mock","axios","require","Students","get","then","res","data","Classes","respC","resC","Schools","respS","resS","test","students","resp","mockImplementation","Promise","resolve","all","expect","toEqual","classes","schools"],"mappings":";;AAuBAA,IAAI,CAACC,IAAL,CAAU,OAAV;;;;;;;;;;;;AAvBA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;IAEMC,Q;;;;;;;;;;;;;;;;;;;uBAEkBF,KAAK,CAACG,GAAN,CAAU,8BAAV,EAA0CC,IAA1C,CAA+C,UAAAC,GAAG;AAAA,yBAAIA,GAAG,CAACC,IAAR;AAAA,iBAAlD,C;;;AAAZD,gBAAAA,G;iDACGA,G;;;;;;;;;;;;;;;;;;;;IAITE,O;;;;;;;;;;;;;;;;;;;uBAEkBP,KAAK,CAACG,GAAN,CAAU,2BAAV,EAAuCC,IAAvC,CAA4C,UAAAI,KAAK;AAAA,yBAAIA,KAAK,CAACF,IAAV;AAAA,iBAAjD,C;;;AAAbG,gBAAAA,I;kDACGA,I;;;;;;;;;;;;;;;;;;;;IAIRC,O;;;;;;;;;;;;;;;;;;;uBAEkBV,KAAK,CAACG,GAAN,CAAU,4BAAV,EAAwCC,IAAxC,CAA6C,UAAAO,KAAK;AAAA,yBAAIA,KAAK,CAACL,IAAV;AAAA,iBAAlD,C;;;AAAbM,gBAAAA,I;kDACGA,I;;;;;;;;;;;;;;;;;;;;AAMdC,IAAI,CAAC,uBAAD,EAA0B,YAAM;AAChC,MAAMC,QAAQ,GAAG,CAAC;AACd,mBAAe,eADD;AAEd,YAAQ,eAFM;AAGd,aAAS,GAHK;AAId,kBAAc;AAJA,GAAD,CAAjB;AAOA,MAAMC,IAAI,GAAG;AAAET,IAAAA,IAAI,EAAGQ;AAAT,GAAb;AAEAd,EAAAA,KAAK,CAACG,GAAN,CAAUa,kBAAV,CAA6B;AAAA,WAAMC,OAAO,CAACC,OAAR,CAAgBH,IAAhB,CAAN;AAAA,GAA7B;AAEA,SAAOb,QAAQ,CAACiB,GAAT,GAAef,IAAf,CAAoB,UAAAE,IAAI;AAAA,WAAIc,MAAM,CAACd,IAAD,CAAN,CAAae,OAAb,CAAqBP,QAArB,CAAJ;AAAA,GAAxB,CAAP;AAEH,CAdG,CAAJ;AAgBAD,IAAI,CAAC,sBAAD,EAAyB,YAAM;AAE/B,MAAMS,OAAO,GAAG,CAAE;AACd,mBAAe,yBADD;AAEd,oBAAgB,iBAFF;AAGd,aAAS,IAHK;AAId,kBAAc;AAJA,GAAF,CAAhB;AAOA,MAAMd,KAAK,GAAG;AAAEF,IAAAA,IAAI,EAAGgB;AAAT,GAAd;AAEAtB,EAAAA,KAAK,CAACG,GAAN,CAAUa,kBAAV,CAA6B;AAAA,WAAMC,OAAO,CAACC,OAAR,CAAgBV,KAAhB,CAAN;AAAA,GAA7B;AAEAD,EAAAA,OAAO,CAACY,GAAR,GAAcf,IAAd,CAAmB,UAAAW,IAAI;AAAA,WAAIK,MAAM,CAACZ,KAAK,CAACF,IAAP,CAAN,CAAmBe,OAAnB,CAA2BC,OAA3B,CAAJ;AAAA,GAAvB;AACH,CAdG,CAAJ;AAgBAT,IAAI,CAAC,sBAAD,EAAyB,YAAM;AAC/B,MAAMU,OAAO,GAAG,CAAC;AACb,mBAAc,eADD;AAEb,kBAAa,eAFA;AAGb,sBAAiB,iBAHJ;AAIb,aAAQ;AAJK,GAAD,CAAhB;AAOA,MAAMZ,KAAK,GAAG;AAAEL,IAAAA,IAAI,EAAGiB;AAAT,GAAd;AAEAvB,EAAAA,KAAK,CAACG,GAAN,CAAUa,kBAAV,CAA6B;AAAA,WAAMC,OAAO,CAACC,OAAR,CAAgBP,KAAhB,CAAN;AAAA,GAA7B;AAEAD,EAAAA,OAAO,CAACS,GAAR,GAAcf,IAAd,CAAmB,UAAAW,IAAI;AAAA,WAAIK,MAAM,CAACT,KAAK,CAACL,IAAP,CAAN,CAAmBe,OAAnB,CAA2BE,OAA3B,CAAJ;AAAA,GAAvB;AAEH,CAdG,CAAJ","sourcesContent":["const axios = require('axios');\n\nclass Students {\n    static async all() {\n        let res = await axios.get('../data/students-scores.json').then(res => res.data);\n        return res;\n     }\n}\n\nclass Classes {\n    static async all() {\n       let resC = await axios.get('../data/class-scores.json').then(respC => respC.data);\n       return resC;\n     }\n}\n\nclass Schools {\n    static async all() {\n       let resS = await axios.get('../data/school-scores.json').then(respS => respS.data);\n       return resS;\n     }\n}\n\njest.mock('axios');\n\ntest('Should fetch Students', () => {\n    const students = [{\n        \"school_name\": \"state central\",\n        \"name\": \"alyce fischer\",\n        \"score\": 995,\n        \"class_name\": 3\n    }];\n\n    const resp = { data : students };\n \n    axios.get.mockImplementation(() => Promise.resolve(resp));\n\n    return Students.all().then(data => expect(data).toEqual(students));\n\n});\n\ntest('Should fetch Classes', () => {\n\n    const classes = [ {\n        \"school_name\": \"Fort Street High School\",\n        \"teacher_name\": \"Connie Mcknight\",\n        \"score\": 8566,\n        \"class_name\": 1\n      }];\n\n    const respC = { data : classes };\n\n    axios.get.mockImplementation(() => Promise.resolve(respC));\n\n    Classes.all().then(resp => expect(respC.data).toEqual(classes));\n});\n\ntest('Should fetch Schools', () => {\n    const schools = [{\n        \"school_name\":\"Brsibane High\",\n        \"admin_name\":\"Brandie Mcgee\",\n        \"school_address\":\"Gold Coast, QLD\",\n        \"score\":95608\n     }];\n\n    const respS = { data : schools };\n\n    axios.get.mockImplementation(() => Promise.resolve(respS));\n\n    Schools.all().then(resp => expect(respS.data).toEqual(schools));\n    \n});\n"]}